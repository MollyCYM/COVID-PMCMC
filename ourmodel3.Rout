
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> rm(list=ls())
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──
✔ ggplot2 3.3.6      ✔ purrr   0.3.5 
✔ tibble  3.1.8      ✔ dplyr   1.0.10
✔ tidyr   1.2.1      ✔ stringr 1.4.1 
✔ readr   2.1.3      ✔ forcats 0.5.2 
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(ggplot2)
> library(ggpubr)
> library(pander)
> library(lubridate)

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

> library(latex2exp)
> library(rbi)

Attaching package: ‘rbi’

The following object is masked from ‘package:dplyr’:

    filter

The following object is masked from ‘package:purrr’:

    flatten

The following objects are masked from ‘package:stats’:

    filter, optimise, predict, simulate, update

The following object is masked from ‘package:utils’:

    fix

The following object is masked from ‘package:base’:

    sample

> library(rbi.helpers)
> # Load the data
> v <- read.csv("427days.csv", header=FALSE, stringsAsFactors=FALSE) %>%
+   rowSums()
> y <- data.frame(value = v) %>%
+   mutate(time = seq(1,427, by = 1)) %>%
+   dplyr::select(time, value)
> 
> ncores <- 8 #modify this for multi-tasks
> minParticles <- max(ncores, 16)
> 
> model_str <- "
+ model dureau {
+   obs y
+ 
+   state S
+   state E
+   state I
+   state R
+   state x
+ 
+   input N
+   param k
+   param gamma
+   param sigma // Noise driver
+   param E0
+   param I0
+   param R0
+   param x0
+ 
+   sub parameter {
+     k ~ truncated_gaussian(5.6, 6, lower = 0) // k is the period here, not the rate, i.e. 1/k is the rate
+     gamma ~ truncated_gaussian(11.5, 2.9, lower = 0) // gamma is the period, not the rate
+     sigma ~ uniform(0,1)
+     x0 ~ uniform(-5,2)
+     I0 ~ uniform(-16, -9)
+     E0 ~ uniform(-16, -9)
+     R0 ~ truncated_gaussian(0.15, 0.15, lower = 0, upper = 1)
+   }
+ 
+   sub initial {
+     S <- N
+     R <- R0*S
+     S <- S - R
+ 
+     E <- exp(E0 + log(S))
+     S <- S - E
+     I <- exp(I0 + log(S))
+     S <- S - I
+     x <- x0
+   }
+ 
+   sub transition(delta = 1) {
+     noise e
+     e ~ wiener()
+     ode(alg = 'RK4(3)', h = 1.0, atoler = 1.0e-3, rtoler = 1.0e-8) {
+       dx/dt = sigma*e
+       dS/dt = -exp(x)*S*(0.1*I+E)/N
+       dE/dt = exp(x)*S*(0.1*I+E)/N - E*(1/k+1/gamma)
+       dI/dt = E/k-I/gamma
+       dR/dt = (I+E)/gamma
+     }
+   }
+ 
+   sub observation {
+     y ~ poisson(rate=E/k)
+   }
+ 
+   sub proposal_parameter {
+     k ~ gaussian(k, 0.005)
+     sigma ~ gaussian(sigma, 0.01)
+     gamma ~ gaussian(gamma, 0.01)
+     x0 ~ gaussian(x0, 0.05)
+     E0 ~ gaussian(E0, 0.05)
+     I0 ~ gaussian(I0, 0.05)
+     R0 ~ gaussian(R0, 0.05)
+   }
+ }"
> model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
> bi_model <- libbi(model)
> input_lst <- list(N = 55977178)
> end_time <- max(y$time)
> obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
> 
> bi <- sample(bi_model, end_time = end_time, input = input_lst, obs = obs_lst, nsamples = 1000, nparticles = minParticles, nthreads = ncores, proposal = 'prior') %>% 
+   adapt_particles(min = minParticles, max = minParticles*200) %>%
+   adapt_proposal(min = 0.05, max = 0.4) %>%
+   sample(nsamples = 5000, thin = 5) %>% # burn in 
+   sample(nsamples = 5000, thin = 5)
Tue Oct 18 21:12:36 2022 Adapting the proposal distribution
Tue Oct 18 21:12:36 2022 Adapting the number of particles
Tue Oct 18 21:17:58 2022 16 particles, loglikelihod variance: 423221.397499711
Tue Oct 18 21:21:44 2022 32 particles, loglikelihod variance: 66591.7105745089
Tue Oct 18 21:26:48 2022 64 particles, loglikelihod variance: 61926.8958027374
Tue Oct 18 21:31:12 2022 128 particles, loglikelihod variance: 22517.4863422583
Tue Oct 18 21:38:38 2022 256 particles, loglikelihod variance: 20770.4650113966
Tue Oct 18 21:53:04 2022 512 particles, loglikelihod variance: 18559.3847792788
Tue Oct 18 22:21:22 2022 1024 particles, loglikelihod variance: 41.189495607245
Tue Oct 18 23:17:28 2022 2048 particles, loglikelihod variance: 1762.73428384632
Tue Oct 18 23:17:28 2022 Choosing 3200 particles.
Tue Oct 18 23:17:28 2022 Initial trial run
Wed Oct 19 03:03:13 2022 Acceptance rate 0.011011011011011, adapting size with scale 1
Wed Oct 19 06:16:24 2022 Acceptance rate 0.0130130130130131, adapting size with scale 0.5
Wed Oct 19 07:40:24 2022 Acceptance rate 0.00400400400400402, adapting size with scale 0.25
Wed Oct 19 08:31:38 2022 Acceptance rate 0.00600600600600598, adapting size with scale 0.125
Wed Oct 19 09:24:02 2022 Acceptance rate 0.00400400400400402, adapting size with scale 0.0625
Wed Oct 19 10:16:29 2022 Acceptance rate 0.00900900900900903, adapting size with scale 0.03125
Wed Oct 19 11:08:45 2022 Acceptance rate 0.00900900900900903, adapting size with scale 0.015625

Execution halted
