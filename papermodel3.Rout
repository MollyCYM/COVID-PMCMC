
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> rm(list=ls())
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──
✔ ggplot2 3.3.6      ✔ purrr   0.3.5 
✔ tibble  3.1.8      ✔ dplyr   1.0.10
✔ tidyr   1.2.1      ✔ stringr 1.4.1 
✔ readr   2.1.3      ✔ forcats 0.5.2 
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(ggplot2)
> library(ggpubr)
> library(pander)
> library(lubridate)

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

> library(latex2exp)
> library(rbi)

Attaching package: ‘rbi’

The following object is masked from ‘package:dplyr’:

    filter

The following object is masked from ‘package:purrr’:

    flatten

The following objects are masked from ‘package:stats’:

    filter, optimise, predict, simulate, update

The following object is masked from ‘package:utils’:

    fix

The following object is masked from ‘package:base’:

    sample

> library(rbi.helpers)
> # Load the data
> v <- read.csv("andre_estimates_21_02.txt", sep  = "\t") %>%
+   rowSums()
> y <- data.frame(value = v) %>%
+   mutate(time = seq(7, by = 7, length.out = n())) %>%
+   dplyr::select(time, value)
> ncores <- 8
> minParticles <- max(ncores, 16)
> model_str <- "
+ model dureau {
+   obs y
+ 
+   state S
+   state E
+   state I
+   state R
+   state x
+ 
+   state Z
+ 
+   input N
+   param k
+   param gamma
+   param sigma // Noise driver
+   param E0
+   param I0
+   param R0
+   param x0
+ 
+   sub parameter {
+     k ~ truncated_gaussian(1.59, 0.02, lower = 0) // k is the period here, not the rate, i.e. 1/k is the rate
+     gamma ~ truncated_gaussian(1.08, 0.075, lower = 0) // gamma is the period, not the rate
+     sigma ~ uniform(0,1)
+     x0 ~ uniform(-5,2)
+     I0 ~ uniform(-16, -9)
+     E0 ~ uniform(-16, -9)
+     R0 ~ truncated_gaussian(0.15, 0.15, lower = 0, upper = 1)
+   }
+ 
+   sub initial {
+     S <- N
+     R <- R0*S
+     S <- S - R
+ 
+     E <- exp(E0 + log(S))
+     S <- S - E
+     I <- exp(I0 + log(S))
+     S <- S - I
+     x <- x0
+     Z <- 0
+   }
+ 
+   sub transition(delta = 1) {
+     Z <- ((t_now) % 7 == 0 ? 0 : Z)
+     noise e
+     e ~ wiener()
+     ode(alg = 'RK4(3)', h = 1.0, atoler = 1.0e-3, rtoler = 1.0e-8) {
+       dx/dt = sigma*e
+       dS/dt = -exp(x)*S*I/N
+       dE/dt = exp(x)*S*I/N - E/k
+       dI/dt = E/k-I/gamma
+       dR/dt = I/gamma
+       dZ/dt = E/k
+     }
+   }
+ 
+   sub observation {
+     y ~ poisson(rate=Z/10)
+   }
+ 
+   sub proposal_parameter {
+     k ~ gaussian(k, 0.005)
+     sigma ~ gaussian(sigma, 0.01)
+     gamma ~ gaussian(gamma, 0.01)
+     x0 ~ gaussian(x0, 0.05)
+     E0 ~ gaussian(E0, 0.05)
+     I0 ~ gaussian(I0, 0.05)
+     R0 ~ gaussian(R0, 0.05)
+   }
+ }"
> model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
> bi_model <- libbi(model)
> input_lst <- list(N = 52196381)
> end_time <- max(y$time)
> obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
> 
> bi <- sample(bi_model, end_time = end_time, input = input_lst, obs = obs_lst, nsamples = 1000, nparticles = minParticles, nthreads = ncores, proposal = 'prior') %>% 
+   adapt_particles(min = minParticles, max = minParticles*200) %>%
+   adapt_proposal(min = 0.05, max = 0.4) %>%
+   sample(nsamples = 5000, thin = 5) %>% # burn in 
+   sample(nsamples = 5000, thin = 5)
Thu Oct 20 16:17:57 2022 Adapting the proposal distribution
Thu Oct 20 16:17:57 2022 Adapting the number of particles
Thu Oct 20 16:20:58 2022 16 particles, loglikelihod variance: 19915038801.4781
Thu Oct 20 16:21:58 2022 32 particles, loglikelihod variance: 3612593469.16892
Thu Oct 20 16:23:12 2022 64 particles, loglikelihod variance: 840628009.415303
Thu Oct 20 16:24:20 2022 128 particles, loglikelihod variance: 69864714.8858324
Thu Oct 20 16:26:00 2022 256 particles, loglikelihod variance: 2047543262.35698
Thu Oct 20 16:29:59 2022 512 particles, loglikelihod variance: 1868354.41939725
Thu Oct 20 16:36:32 2022 1024 particles, loglikelihod variance: 1067437.14113877
Thu Oct 20 16:44:10 2022 2048 particles, loglikelihod variance: 43421214.9331704
Thu Oct 20 16:44:10 2022 Choosing 3200 particles.
Thu Oct 20 16:44:11 2022 Initial trial run
Thu Oct 20 16:56:39 2022 Acceptance rate 0.012012012012012, adapting size with scale 1
Thu Oct 20 17:08:31 2022 Acceptance rate 0.019019019019019, adapting size with scale 0.5
Thu Oct 20 17:20:35 2022 Acceptance rate 0.016016016016016, adapting size with scale 0.25
Thu Oct 20 17:33:01 2022 Acceptance rate: 0.102102102102102
> 
> bi_lst <- bi_read(bi %>% sample_obs)
> 
> write.csv(bi_lst,"37w2.csv")
> fitY <- bi_lst$y %>%
+   group_by(time) %>%
+   mutate(
+     q025 = quantile(value, 0.025),
+     q25 = quantile(value, 0.25),
+     q50 = quantile(value, 0.5),
+     q75 = quantile(value, 0.75),
+     q975 = quantile(value, 0.975)
+   ) %>% ungroup() %>%
+   left_join(y %>% rename(Y = value))
Joining, by = "time"
> write.csv(fitY,"37wy2.csv")
> 
> plot_df <- bi_lst$x %>% mutate(value = exp(value)) %>%
+   group_by(time) %>%
+   mutate(
+     q025 = quantile(value, 0.025),
+     q25 = quantile(value, 0.25),
+     q50 = quantile(value, 0.5),
+     q75 = quantile(value, 0.75),
+     q975 = quantile(value, 0.975)
+   ) %>% ungroup()
> write.csv(plot_df,"37wbeta2.csv")
> 
> plot_df1 <- bi_lst$x %>% mutate(value = exp(value)) %>%
+   group_by(np) %>% mutate(value = value - value[1]) %>%
+   group_by(time) %>%
+   mutate(
+     q025 = quantile(value, 0.025),
+     q25 = quantile(value, 0.25),
+     q50 = quantile(value, 0.5),
+     q75 = quantile(value, 0.75),
+     q975 = quantile(value, 0.975)
+   ) %>% ungroup()
> write.csv(plot_df1,"37wbeta2.csv")
> 
> write.csv(bi_lst$k$value,"37wpalpha2.csv")
> write.csv(1/bi_lst$k$value,"37walpha2.csv")
> write.csv(bi_lst$gamma$value,"37wpgamma2.csv")
> write.csv(1/bi_lst$gamma$value,"37wgamma2.csv")
> 
> 
> proc.time()
     user    system   elapsed 
96287.029    32.768 12117.765 
