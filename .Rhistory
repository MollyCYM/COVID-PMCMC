const m_q = 0.1  // zooplankton quadratic mortality
param mu, sigma  // mean and standard deviation of phytoplankton growth
state P, Z       // phytoplankton, zooplankton
noise alpha      // stochastic phytoplankton growth rate
obs P_obs        // observations of phytoplankton
sub parameter {
mu ~ uniform(0.0, 1.0)
sigma ~ uniform(0.0, 0.5)
}
sub proposal_parameter {
mu ~ truncated_gaussian(mu, 0.02, 0.0, 1.0);
sigma ~ truncated_gaussian(sigma, 0.01, 0.0, 0.5);
}
sub initial {
P <- log(2.0)  // Change P_0 starts from a fixed number
Z ~ log_normal(log(2.0), 0.1)
}
sub transition(delta = 1.0) {
alpha ~ gaussian(mu, sigma)
ode {
dP/dt = alpha*P - c*P*Z
dZ/dt = e*c*P*Z - m_l*Z - m_q*Z*Z
}
}
sub observation {
P_obs ~ log_normal(log(P), 0.2)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
# create simulated data set
sim <- bi_generate_dataset(bi_model, end_time = 100)
obs_lst <- bi_read(sim)["P_obs"]
bi <- sample(
bi_model, end_time = end_time, obs = obs_lst, nsamples = 200,
nparticles = minParticles, nthreads = ncores, proposal = 'model'
) |>
adapt_particles(min = minParticles, max = minParticles * 500) |>
adapt_proposal(min = 0.1, max = 0.4) |>
sample(nsamples = 100, thin = 1)
library(rbi)
library(rbi.helpers)
set.seed(1234)
end_time <- 101
ncores <- 8
minParticles <- max(ncores, 16)
model_str <- "
model PZ {
const c = 0.25   // zooplankton clearance rate
const e = 0.3    // zooplankton growth efficiency
const m_l = 0.1  // zooplankton linear mortality
const m_q = 0.1  // zooplankton quadratic mortality
param mu, sigma  // mean and standard deviation of phytoplankton growth
state P, Z       // phytoplankton, zooplankton
noise alpha      // stochastic phytoplankton growth rate
obs P_obs        // observations of phytoplankton
sub parameter {
mu ~ uniform(0.0, 1.0)
sigma ~ uniform(0.0, 0.5)
}
sub proposal_parameter {
mu ~ truncated_gaussian(mu, 0.02, 0.0, 1.0);
sigma ~ truncated_gaussian(sigma, 0.01, 0.0, 0.5);
}
sub initial {
P <- log(2.0)  // Change P_0 starts from a fixed number
Z ~ log_normal(log(2.0), 0.1)
}
sub transition(delta = 1.0) {
alpha ~ gaussian(mu, sigma)
ode {
dP/dt = alpha*P - c*P*Z
dZ/dt = e*c*P*Z - m_l*Z - m_q*Z*Z
}
}
sub observation {
P_obs ~ log_normal(log(P), 0.2)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
# create simulated data set
sim <- bi_generate_dataset(bi_model, end_time = 100)
obs_lst <- bi_read(sim)["P_obs"]
bi <- sample(
bi_model, end_time = end_time, obs = obs_lst, nsamples = 200,
nparticles = minParticles, nthreads = ncores, proposal = 'model'
) |>
adapt_particles(min = minParticles, max = minParticles * 500) |>
adapt_proposal(min = 0.1, max = 0.4) |>
sample(nsamples = 100, thin = 1)
rm(list=ls())
library(rbi)
library(rbi.helpers)
set.seed(1234)
end_time <- 101
ncores <- 8
minParticles <- max(ncores, 16)
model_str <- "
model PZ {
const c = 0.25   // zooplankton clearance rate
const e = 0.3    // zooplankton growth efficiency
const m_l = 0.1  // zooplankton linear mortality
const m_q = 0.1  // zooplankton quadratic mortality
param mu, sigma  // mean and standard deviation of phytoplankton growth
state P, Z       // phytoplankton, zooplankton
noise alpha      // stochastic phytoplankton growth rate
obs P_obs        // observations of phytoplankton
sub parameter {
mu ~ uniform(0.0, 1.0)
sigma ~ uniform(0.0, 0.5)
}
sub proposal_parameter {
mu ~ truncated_gaussian(mu, 0.02, 0.0, 1.0);
sigma ~ truncated_gaussian(sigma, 0.01, 0.0, 0.5);
}
sub initial {
P <- log(2.0)  // Change P_0 starts from a fixed number
Z ~ log_normal(log(2.0), 0.1)
}
sub transition(delta = 1.0) {
alpha ~ gaussian(mu, sigma)
ode {
dP/dt = alpha*P - c*P*Z
dZ/dt = e*c*P*Z - m_l*Z - m_q*Z*Z
}
}
sub observation {
P_obs ~ log_normal(log(P), 0.2)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
# create simulated data set
sim <- bi_generate_dataset(bi_model, end_time = 100)
obs_lst <- bi_read(sim)["P_obs"]
bi <- sample(
bi_model, end_time = end_time, obs = obs_lst, nsamples = 200,
nparticles = minParticles, nthreads = ncores, proposal = 'model'
) |>
adapt_particles(min = minParticles, max = minParticles * 500) |>
adapt_proposal(min = 0.1, max = 0.4) |>
sample(nsamples = 100, thin = 1)
rm(list=ls())
library(rbi)
library(rbi.helpers)
set.seed(1234)
end_time <- 101
ncores <- 8
minParticles <- max(ncores, 16)
model_str <- "
model PZ {
const c = 0.25   // zooplankton clearance rate
const e = 0.3    // zooplankton growth efficiency
const m_l = 0.1  // zooplankton linear mortality
const m_q = 0.1  // zooplankton quadratic mortality
param mu, sigma  // mean and standard deviation of phytoplankton growth
state P, Z       // phytoplankton, zooplankton
noise alpha      // stochastic phytoplankton growth rate
obs P_obs        // observations of phytoplankton
sub parameter {
mu ~ uniform(0.0, 1.0)
sigma ~ uniform(0.0, 0.5)
}
sub proposal_parameter {
mu ~ truncated_gaussian(mu, 0.02, 0.0, 1.0);
sigma ~ truncated_gaussian(sigma, 0.01, 0.0, 0.5);
}
sub initial {
P <- log(2.0)  // Change P_0 starts from a fixed number
Z ~ log_normal(log(2.0), 0.1)
}
sub transition(delta = 1.0) {
alpha ~ gaussian(mu, sigma)
ode {
dP/dt = alpha*P - c*P*Z
dZ/dt = e*c*P*Z - m_l*Z - m_q*Z*Z
}
}
sub observation {
P_obs ~ log_normal(log(P), 0.2)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
# create simulated data set
sim <- generate_dataset(bi_model, end_time = 100)
library(rbi)
library(rbi.helpers)
set.seed(1234)
end_time <- 101
ncores <- 8
minParticles <- max(ncores, 16)
model_str <- "
model PZ {
const c = 0.25   // zooplankton clearance rate
const e = 0.3    // zooplankton growth efficiency
const m_l = 0.1  // zooplankton linear mortality
const m_q = 0.1  // zooplankton quadratic mortality
param mu, sigma  // mean and standard deviation of phytoplankton growth
state P, Z       // phytoplankton, zooplankton
noise alpha      // stochastic phytoplankton growth rate
obs P_obs        // observations of phytoplankton
sub parameter {
mu ~ uniform(0.0, 1.0)
sigma ~ uniform(0.0, 0.5)
}
sub proposal_parameter {
mu ~ truncated_gaussian(mu, 0.02, 0.0, 1.0);
sigma ~ truncated_gaussian(sigma, 0.01, 0.0, 0.5);
}
sub initial {
P <- log(2.0)  // Change P_0 starts from a fixed number
Z ~ log_normal(log(2.0), 0.1)
}
sub transition(delta = 1.0) {
alpha ~ gaussian(mu, sigma)
ode {
dP/dt = alpha*P - c*P*Z
dZ/dt = e*c*P*Z - m_l*Z - m_q*Z*Z
}
}
sub observation {
P_obs ~ log_normal(log(P), 0.2)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
# create simulated data set
sim <- generate_dataset(bi_model, end_time = 100)
library(rbi)
library(rbi.helpers)
set.seed(1234)
end_time <- 101
ncores <- 8
minParticles <- max(ncores, 16)
model_str <- "
model PZ {
const c = 0.25   // zooplankton clearance rate
const e = 0.3    // zooplankton growth efficiency
const m_l = 0.1  // zooplankton linear mortality
const m_q = 0.1  // zooplankton quadratic mortality
param mu, sigma  // mean and standard deviation of phytoplankton growth
state P, Z       // phytoplankton, zooplankton
noise alpha      // stochastic phytoplankton growth rate
obs P_obs        // observations of phytoplankton
sub parameter {
mu ~ uniform(0.0, 1.0)
sigma ~ uniform(0.0, 0.5)
}
sub proposal_parameter {
mu ~ truncated_gaussian(mu, 0.02, 0.0, 1.0);
sigma ~ truncated_gaussian(sigma, 0.01, 0.0, 0.5);
}
sub initial {
P <- log(2.0)  // Change P_0 starts from a fixed number
Z ~ log_normal(log(2.0), 0.1)
}
sub transition(delta = 1.0) {
alpha ~ gaussian(mu, sigma)
ode {
dP/dt = alpha*P - c*P*Z
dZ/dt = e*c*P*Z - m_l*Z - m_q*Z*Z
}
}
sub observation {
P_obs ~ log_normal(log(P), 0.2)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
# create simulated data set
sim <- generate_dataset(bi_model, end_time = 100)
packageVersion("rbi")
packageVersion("rbi.helpers")
rm(list=ls())
library(rbi)
library(rbi.helpers)
set.seed(1234)
end_time <- 101
ncores <- 8
minParticles <- max(ncores, 16)
model_str <- "
model PZ {
const c = 0.25   // zooplankton clearance rate
const e = 0.3    // zooplankton growth efficiency
const m_l = 0.1  // zooplankton linear mortality
const m_q = 0.1  // zooplankton quadratic mortality
param mu, sigma  // mean and standard deviation of phytoplankton growth
state P, Z       // phytoplankton, zooplankton
noise alpha      // stochastic phytoplankton growth rate
obs P_obs        // observations of phytoplankton
sub parameter {
mu ~ uniform(0.0, 1.0)
sigma ~ uniform(0.0, 0.5)
}
sub proposal_parameter {
mu ~ truncated_gaussian(mu, 0.02, 0.0, 1.0);
sigma ~ truncated_gaussian(sigma, 0.01, 0.0, 0.5);
}
sub initial {
P <- log(2.0)  // Change P_0 starts from a fixed number
Z ~ log_normal(log(2.0), 0.1)
}
sub transition(delta = 1.0) {
alpha ~ gaussian(mu, sigma)
ode {
dP/dt = alpha*P - c*P*Z
dZ/dt = e*c*P*Z - m_l*Z - m_q*Z*Z
}
}
sub observation {
P_obs ~ log_normal(log(P), 0.2)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
# create simulated data set
sim <- generate_dataset(bi_model, end_time = 100)
# create simulated data set
sim <- bi_generate_dataset(bi_model, end_time = 100)
obs_lst <- bi_read(sim)["P_obs"]
View(obs_lst)
View(obs_lst)
obs_lst[["P_obs"]]
rm(list=ls())
# library(tidyverse)
# library(ggplot2)
# library(ggpubr)
# library(pander)
# library(lubridate)
# library(latex2exp)
library(rbi)
library(rbi.helpers)
Load the data
rm(list=ls())
# library(tidyverse)
# library(ggplot2)
# library(ggpubr)
# library(pander)
# library(lubridate)
# library(latex2exp)
library(rbi)
library(rbi.helpers)
# Load the data
v <- read.csv("obs_P.csv", header=FALSE, stringsAsFactors=FALSE)
P_obs <- data.frame(value = v) |>
mutate(time = seq(1, by = 1, length.out = n())) |>
dplyr::select(time, V1)
colnames(P_obs) <- c("time", "value")
ncores <- 8
minParticles <- max(ncores, 16)
model_str <- "
model PZ {
const c = 0.25   // zooplankton clearance rate
const e = 0.3    // zooplankton growth efficiency
const m_l = 0.1  // zooplankton linear mortality
const m_q = 0.1  // zooplankton quadratic mortality
param mu, sigma  // mean and standard deviation of phytoplankton growth
state P, Z       // phytoplankton, zooplankton
noise alpha      // stochastic phytoplankton growth rate
obs P_obs        // observations of phytoplankton
sub parameter {
mu ~ uniform(0.0, 1.0)
sigma ~ uniform(0.0, 0.5)
}
sub proposal_parameter {
mu ~ truncated_gaussian(mu, 0.02, 0.0, 1.0);
sigma ~ truncated_gaussian(sigma, 0.01, 0.0, 0.5);
}
sub initial {
P <- log(2.0)
Z ~ log_normal(log(2.0), 0.1)
}
sub transition(delta = 1.0) {
alpha ~ gaussian(mu, sigma)
ode {
dP/dt = alpha*P - c*P*Z
dZ/dt = e*c*P*Z - m_l*Z - m_q*Z*Z
}
}
sub observation {
P_obs ~ log_normal(log(P), 0.2)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
# end_time <- max(P_obs$time)
obs_lst <- list(P_obs = P_obs %>% dplyr::filter(time <= end_time))
rm(list=ls())
# library(tidyverse)
# library(ggplot2)
# library(ggpubr)
# library(pander)
# library(lubridate)
# library(latex2exp)
library(rbi)
library(rbi.helpers)
# Load the data
v <- read.csv("obs_P.csv", header=FALSE, stringsAsFactors=FALSE)
P_obs <- data.frame(value = v) |>
mutate(time = seq(1, by = 1, length.out = n())) |>
dplyr::select(time, V1)
colnames(P_obs) <- c("time", "value")
ncores <- 8
minParticles <- max(ncores, 16)
model_str <- "
model PZ {
const c = 0.25   // zooplankton clearance rate
const e = 0.3    // zooplankton growth efficiency
const m_l = 0.1  // zooplankton linear mortality
const m_q = 0.1  // zooplankton quadratic mortality
param mu, sigma  // mean and standard deviation of phytoplankton growth
state P, Z       // phytoplankton, zooplankton
noise alpha      // stochastic phytoplankton growth rate
obs P_obs        // observations of phytoplankton
sub parameter {
mu ~ uniform(0.0, 1.0)
sigma ~ uniform(0.0, 0.5)
}
sub proposal_parameter {
mu ~ truncated_gaussian(mu, 0.02, 0.0, 1.0);
sigma ~ truncated_gaussian(sigma, 0.01, 0.0, 0.5);
}
sub initial {
P <- log(2.0)
Z ~ log_normal(log(2.0), 0.1)
}
sub transition(delta = 1.0) {
alpha ~ gaussian(mu, sigma)
ode {
dP/dt = alpha*P - c*P*Z
dZ/dt = e*c*P*Z - m_l*Z - m_q*Z*Z
}
}
sub observation {
P_obs ~ log_normal(log(P), 0.2)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
# end_time <- max(P_obs$time)
end_time <- 101
obs_lst <- list(P_obs = P_obs %>% dplyr::filter(time <= end_time))
# sim <- bi_generate_dataset(bi_model, end_time = 100)
# obs_lst <- bi_read(sim)["P_obs"]
bi <- sample(bi_model, end_time = end_time, obs = obs_lst, nsamples = 200, nparticles = minParticles, nthreads = ncores, proposal = 'model') |>
adapt_particles(min = minParticles, max = minParticles*500) |>
adapt_proposal(min = 0.1, max = 0.4) |>
sample(nsamples = 100, thin = 1)
rm(list=ls())
# library(tidyverse)
# library(ggplot2)
# library(ggpubr)
# library(pander)
# library(lubridate)
# library(latex2exp)
library(rbi)
library(rbi.helpers)
# Load the data
v <- read.csv("obs_P.csv", header=FALSE, stringsAsFactors=FALSE)
P_obs <- data.frame(value = v) |>
mutate(time = seq(1, by = 1, length.out = n())) |>
dplyr::select(time, V1)
colnames(P_obs) <- c("time", "value")
ncores <- 8
minParticles <- max(ncores, 16)
model_str <- "
model PZ {
const c = 0.25   // zooplankton clearance rate
const e = 0.3    // zooplankton growth efficiency
const m_l = 0.1  // zooplankton linear mortality
const m_q = 0.1  // zooplankton quadratic mortality
param mu, sigma  // mean and standard deviation of phytoplankton growth
state P, Z       // phytoplankton, zooplankton
noise alpha      // stochastic phytoplankton growth rate
obs P_obs        // observations of phytoplankton
sub parameter {
mu ~ uniform(0.0, 1.0)
sigma ~ uniform(0.0, 0.5)
}
sub proposal_parameter {
mu ~ truncated_gaussian(mu, 0.02, 0.0, 1.0);
sigma ~ truncated_gaussian(sigma, 0.01, 0.0, 0.5);
}
sub initial {
P <- log(2.0)
Z ~ log_normal(log(2.0), 0.1)
}
sub transition(delta = 1.0) {
alpha ~ gaussian(mu, sigma)
ode {
dP/dt = alpha*P - c*P*Z
dZ/dt = e*c*P*Z - m_l*Z - m_q*Z*Z
}
}
sub observation {
P_obs ~ log_normal(log(P), 0.2)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
# end_time <- max(P_obs$time)
end_time <- 101
# obs_lst <- list(P_obs = P_obs %>% dplyr::filter(time <= end_time))
obs_lst <- list(P_obs = P_obs %>% dplyr::filter(time <= 100))
# sim <- bi_generate_dataset(bi_model, end_time = 100)
# obs_lst <- bi_read(sim)["P_obs"]
bi <- sample(bi_model, end_time = end_time, obs = obs_lst, nsamples = 200, nparticles = minParticles, nthreads = ncores, proposal = 'model') |>
adapt_particles(min = minParticles, max = minParticles*500) |>
adapt_proposal(min = 0.1, max = 0.4) |>
sample(nsamples = 100, thin = 1)
