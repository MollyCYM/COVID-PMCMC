# write.csv(Y12,"Covidbm_Y12.csv")
# write.csv(model12,"Covidbm12.csv")
rm(list=ls())
require(deSolve)
set.seed(007) #015
times <- 1:365
N=52196381
sigma <- 0.4
## first, simulate a set of random deviates
e <- rnorm(n = length(times) - 1, sd = sqrt(0.01))
## now compute their cumulative sum
e <- c(0, cumsum(e))
beta<- exp(sigma*e)
plot(beta,type='l')
#write.csv(beta,"simulatebeta.csv")
rm(list=ls())
require(deSolve)
set.seed(007) #015
times <- 1:365
N=52196381
sigma <- 0.4
## first, simulate a set of random deviates
e <- rnorm(n = length(times) - 1, sd = sqrt(0.01))
## now compute their cumulative sum
e <- c(0, cumsum(e))
beta<- exp(sigma*e)
plot(beta,type='l')
#write.csv(beta,"simulatebeta.csv")
# H1N1 <- function(time, current_state, params){
#
#   with(as.list(c(current_state, params)),{
#     for(t in 1:times){
#     N <- S+E+I+R
#     dS <- -(beta[t]*S*I)/N
#     dE <- (beta[t]*S*I)/N - E/k
#     dI <- E/k - I/gamma
#     dR <- I/gamma
#    }
#     return(list(c(dS, dE, dI, dR)))
#   })
# }
H1N1 <- function(time, current_state, params){
with(as.list(c(current_state, params)),{
N <- S+E+I+R
dt <- 1
dS <- -beta[t]*S*I/N
dE <- beta[t]*S*I/N - E/k
dI <- E/k - I/gamma
dR <- I/gamma
return(list(c(dt, dS, dE, dI, dR)))
})
}
params <- c(k=1.59, gamma=1.08)
library('truncnorm')
R0 <- rtruncnorm(1, a=0, b=1, mean = 0.15, sd = 0.15)
E0 <-runif(1,-16, -9)
I0 <-runif(1,-16, -9)
#x <-runif(1, -5,2)
S <- N
R <- R0*S
S <- S - R
E <- exp(E0 + log(S))
S <- S - E
I <- exp(I0 + log(S))
S <- S - I
initial_state<- c(t=1, S=S, E=E, I=I, R=R)
#initial_state <- c(t=1,S=52196380, E=1, I=0, R=0)
model1 <- ode(initial_state, times, H1N1, params)
summary(model1)
matplot(model1, type="l", lty=1, main="H1N1-BM SEIR model", xlab="Time",ylab = "Counts")
legend <- colnames(model1)[3:6]
legend("right", legend=legend, col=3:6, lty = 1)
Z1 <-model1[,4]/1.59
tau1 <- 0.8#runif(1,0,1)
Y1 <-vector(length = 365)
for (i in 1:365){
#Y1[i]<- rlnorm(1,log(Z1[i,]/5),tau1)
Y1[i]<- rlnorm(1,log(Z1[i]/5),tau1)
}
plot(Y1,type='l',ylab="Y obs", xlab = "Time")
# write.csv(Y1,"simY11.csv")
# write.csv(model1,"simulatestates1.csv")
rm(list=ls())
require(deSolve)
set.seed(007) #015
times <- 1:365
N=52196381
sigma <- 0.4
## first, simulate a set of random deviates
e <- rnorm(n = length(times) - 1, sd = sqrt(0.01))
## now compute their cumulative sum
e <- c(0, cumsum(e))
beta<- exp(sigma*e)
plot(beta,type='l')
#write.csv(beta,"simulatebeta.csv")
# H1N1 <- function(time, current_state, params){
#
#   with(as.list(c(current_state, params)),{
#     for(t in 1:times){
#     N <- S+E+I+R
#     dS <- -(beta[t]*S*I)/N
#     dE <- (beta[t]*S*I)/N - E/k
#     dI <- E/k - I/gamma
#     dR <- I/gamma
#    }
#     return(list(c(dS, dE, dI, dR)))
#   })
# }
H1N1 <- function(time, current_state, params){
with(as.list(c(current_state, params)),{
N <- S+E+I+R
dt <- 1
dS <- -beta[t]*S*I/N
dE <- beta[t]*S*I/N - E/k
dI <- E/k - I/gamma
dR <- I/gamma
return(list(c(dt, dS, dE, dI, dR)))
})
}
params <- c(k=1.59, gamma=1.08)
library('truncnorm')
R0 <- rtruncnorm(1, a=0, b=1, mean = 0.15, sd = 0.15)
E0 <-runif(1,-16, -9)
I0 <-runif(1,-16, -9)
#x <-runif(1, -5,2)
S <- N
R <- R0*S
S <- S - R
E <- exp(E0 + log(S))
S <- S - E
I <- exp(I0 + log(S))
S <- S - I
initial_state<- c(t=1, S=S, E=E, I=I, R=R)
#initial_state <- c(t=1,S=52196380, E=1, I=0, R=0)
model1 <- ode(initial_state, times, H1N1, params)
summary(model1)
matplot(model1, type="l", lty=1, main="H1N1-BM SEIR model", xlab="Time",ylab = "Counts")
legend <- colnames(model1)[3:6]
legend("right", legend=legend, col=3:6, lty = 1)
Z1 <-model1[,4]/1.59
tau1 <- 0.8#runif(1,0,1)
Y1 <-vector(length = 365)
for (i in 1:365){
#Y1[i]<- rlnorm(1,log(Z1[i,]/5),tau1)
Y1[i]<- rlnorm(1,log(Z1[i]/5),tau1)
}
plot(Y1,type='l',ylab="Y obs", xlab = "Time")
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(pander)
library(lubridate)
library(latex2exp)
library(rbi)
library(rbi.helpers)
# Load the data
v <- read.csv("H1N1BM_wk.csv", header=FALSE, stringsAsFactors=FALSE) %>%
rowSums()
y <- data.frame(value = v) %>%
mutate(time = seq(7, by = 7, length.out = n())) %>%
dplyr::select(time, value)
ncores <- 8
minParticles <- max(ncores, 16)
model_str <- "
model dureau {
obs y
state S
state E
state I
state R
state x
state Z
input N
param k
param gamma
param sigma // Noise driver
param x0
sub parameter {
k ~ truncated_gaussian(1.59, 0.02, lower = 0) // k is the period here, not the rate, i.e. 1/k is the rate
gamma ~ truncated_gaussian(1.08, 0.075, lower = 0) // gamma is the period, not the rate
sigma ~ truncated_gaussian(0.05, 0.002, lower = 0, upper=0.1)
x0 ~ uniform(-5,2)
}
sub initial {
S <- N
R <- 0.2565*S
S <- S - R
E <- exp(-14.0622 + log(S))
S <- S - E
I <- exp(-15.1255 + log(S))
S <- S - I
x <- x0
Z <- 0
}
sub transition(delta = 1) {
Z <- ((t_now) % 7 == 0 ? 0 : Z)
noise e
e ~ wiener()
ode(alg = 'RK4(3)', h = 1.0, atoler = 1.0e-3, rtoler = 1.0e-8) {
dx/dt = sigma*e
dS/dt = -exp(x)*S*I/N
dE/dt = exp(x)*S*I/N - E/k
dI/dt = E/k-I/gamma
dR/dt = I/gamma
dZ/dt = E/k
}
}
sub observation {
y ~ log_normal(log(max(Z/5, 0)), 0.8)
}
sub proposal_parameter {
k ~ gaussian(k, 0.005)
sigma ~ gaussian(sigma, 0.001)
gamma ~ gaussian(gamma, 0.01)
x0 ~ gaussian(x0, 0.05)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
rewrite(bi_model)
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(pander)
library(lubridate)
library(latex2exp)
library(rbi)
library(rbi.helpers)
# Load the data
v <- read.csv("H1N1BM_wk.csv", header=FALSE, stringsAsFactors=FALSE) %>%
rowSums()
y <- data.frame(value = v) %>%
mutate(time = seq(7, by = 7, length.out = n())) %>%
dplyr::select(time, value)
ncores <- 8
minParticles <- max(ncores, 16)
model_str <- "
model dureau {
obs y
state S
state E
state I
state R
state x
state Z
input N
param k
param gamma
param sigma // Noise driver
param x0
sub parameter {
k ~ truncated_gaussian(1.59, 0.02, lower = 0) // k is the period here, not the rate, i.e. 1/k is the rate
gamma ~ truncated_gaussian(1.08, 0.075, lower = 0) // gamma is the period, not the rate
sigma ~ truncated_gaussian(0.05, 0.002, lower = 0, upper=0.1)
x0 ~ uniform(-5,2)
}
sub initial {
S <- N
R <- 0.2565*S
S <- S - R
E <- exp(-14.0622 + log(S))
S <- S - E
I <- exp(-15.1255 + log(S))
S <- S - I
x <- x0
Z <- 0
}
sub transition(delta = 1) {
Z <- ((t_now) % 7 == 0 ? 0 : Z)
noise e
e ~ wiener()
ode(alg = 'RK4(3)', h = 1.0, atoler = 1.0e-3, rtoler = 1.0e-8) {
dx/dt = sigma*e
dS/dt = -exp(x)*S*I/N
dE/dt = exp(x)*S*I/N - E/k
dI/dt = E/k-I/gamma
dR/dt = I/gamma
dZ/dt = E/k
}
}
sub observation {
y ~ log_normal(log(max(Z/5, 0)), 0.8)
}
sub proposal_parameter {
k ~ gaussian(k, 0.005)
sigma ~ gaussian(sigma, 0.001)
gamma ~ gaussian(gamma, 0.01)
x0 ~ gaussian(x0, 0.05)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
input_lst <- list(N = 52196381)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
init_list <- list(sigma=0.4, gamma=1.08, k=1.59)
bi <- sample(bi_model, end_time = end_time, input = input_lst,init=init_list, obs = obs_lst, nsamples = 1000, nparticles = minParticles, nthreads = ncores, proposal = 'model',seed=123) %>%
adapt_particles(min = minParticles, max = minParticles*200) %>%
adapt_proposal(min = 0.05, max = 0.4) %>%
sample(nsamples = 1000, thin = 1) %>% # burn in
sample(nsamples = 4000, thin = 5)
print_log('/private/var/folders/pg/3b7dvpbx0dqbc02pt9598qnc0000gn/T/RtmpK9As1y/dureau2804f694cdf/output2807ef78e5b.txt')
bi_model
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(pander)
library(lubridate)
library(latex2exp)
library(rbi)
library(rbi.helpers)
# Load the data
v <- read.csv("H1N1BM_wk.csv", header=FALSE, stringsAsFactors=FALSE) %>%
rowSums()
y <- data.frame(value = v) %>%
mutate(time = seq(7, by = 7, length.out = n())) %>%
dplyr::select(time, value)
ncores <- 8
minParticles <- max(ncores, 16)
model_str <- "
model dureau {
obs y
state S
state E
state I
state R
state x
state Z
input N
param k
param gamma
param sigma // Noise driver
param x0
sub parameter {
k ~ truncated_gaussian(1.59, 0.02, lower = 0) // k is the period here, not the rate, i.e. 1/k is the rate
gamma ~ truncated_gaussian(1.08, 0.075, lower = 0) // gamma is the period, not the rate
sigma ~ truncated_gaussian(0.05, 0.01, lower = 0, upper=0.1)
x0 ~ uniform(-5,2)
}
sub initial {
S <- N
R <- 0.2565*S
S <- S - R
E <- exp(-14.0622 + log(S))
S <- S - E
I <- exp(-15.1255 + log(S))
S <- S - I
x <- x0
Z <- 0
}
sub transition(delta = 1) {
Z <- ((t_now) % 7 == 0 ? 0 : Z)
noise e
e ~ wiener()
ode(alg = 'RK4(3)', h = 1.0, atoler = 1.0e-3, rtoler = 1.0e-8) {
dx/dt = sigma*e
dS/dt = -exp(x)*S*I/N
dE/dt = exp(x)*S*I/N - E/k
dI/dt = E/k-I/gamma
dR/dt = I/gamma
dZ/dt = E/k
}
}
sub observation {
y ~ log_normal(log(max(Z/5, 0)), 0.8)
}
sub proposal_parameter {
k ~ gaussian(k, 0.005)
sigma ~ gaussian(sigma, 0.001)
gamma ~ gaussian(gamma, 0.01)
x0 ~ gaussian(x0, 0.05)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
input_lst <- list(N = 52196381)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
init_list <- list(sigma=0.4, gamma=1.08, k=1.59)
bi <- sample(bi_model, end_time = end_time, input = input_lst,init=init_list, obs = obs_lst, nsamples = 1000, nparticles = minParticles, nthreads = ncores, proposal = 'model',seed=123) %>%
adapt_particles(min = minParticles, max = minParticles*200) %>%
adapt_proposal(min = 0.05, max = 0.4) %>%
sample(nsamples = 1000, thin = 1) %>% # burn in
sample(nsamples = 4000, thin = 5)
print_log('/private/var/folders/pg/3b7dvpbx0dqbc02pt9598qnc0000gn/T/RtmpK9As1y/dureau2806ddc618f/output2801ed94413.txt')
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(pander)
library(lubridate)
library(latex2exp)
library(rbi)
library(rbi.helpers)
# Load the data
v <- read.csv("covidbm_wk1.csv", header=FALSE, stringsAsFactors=FALSE) %>%
rowSums()
y <- data.frame(value = v) %>%
mutate(time = seq(7, by = 7, length.out = n())) %>%
dplyr::select(time, value)
ncores <- 8
minParticles <- max(ncores, 16)
model_str <- "
model dureau {
obs y
state S
state E
state I
state R
state x
state Z
input N
param k
sub parameter {
k ~ truncated_gaussian(5, 0.01, lower = 0)
}
sub initial {
S <- N-1
E <- 1
I <- 0
R <- 0
Z <- 0
}
sub transition(delta = 1) {
Z <- ((t_now) % 7 == 0 ? 0 : Z)
noise e
e ~ wiener()
ode(alg = 'RK4(3)', h = 1.0, atoler = 1.0e-3, rtoler = 1.0e-8) {
dx/dt = sqrt(0.004)*e
dS/dt = -exp(x)*S*(0.1*I+E)/N
dE/dt = exp(x)*S*(0.1*I+E)/N - E*(1/k+1/5)
dI/dt = E/k-I*(1/5+0.0087)
dR/dt = (I+E)/5+0.0087*I
dZ/dt = E/k
}
}
sub observation {
y ~ log_normal(log(max(Z/5, 0)), 0.8)
}
sub proposal_parameter {
k ~ truncated_gaussian(k, 0.0001, lower = 0)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
input_lst <- list(N = 52196381)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
init_list <- list(k=3)
bi <- sample(bi_model, end_time = end_time, input = input_lst, init=init_list, obs = obs_lst, nsamples = 1000, nparticles = minParticles, nthreads = ncores, proposal = 'model',seed=0123112) %>%
adapt_particles(min = minParticles, max = minParticles*500) %>%
adapt_proposal(min = 0.1, max = 0.4) %>%
sample(nsamples = 1, thin = 1) %>% # burn in
sample(nsamples = 5000, thin = 5)
rm(list=ls())
library(rbi)
library(rbi.helpers)
library(stringi) ## for reading the model from a string
library(pomp) ## for the bsflu data set
library(tidyverse)
set.seed(296825852)
head(bsflu)
model_str <- '
model bsflu {
const N = 763
const timestep = 1/12
param Beta, mu_I, mu_R1, rho
state S, I, R1
noise infection, recovery, leave_bed
obs Incidence
sub parameter {
Beta ~ uniform(1, 5)
mu_I ~ uniform(0.5, 3)
rho ~ uniform(0.5, 1)
}
sub initial {
S <- N - 1 // susceptibles
I <- 1 // infectious
R1 <- 1 // recovered but bed-confined
}
sub transition (delta = timestep) {
infection ~ binomial(S, 1 - exp(-Beta * I/N * timestep))
recovery ~ binomial(I, 1 - exp(-mu_I * timestep))
leave_bed ~ binomial(R1, 1 - exp(-mu_R1 * timestep))
S <- S - infection
I <- I + infection - recovery
R1 <- R1 + recovery - leave_bed
}
sub observation {
Incidence ~ poisson(rho * R1 + 1e-6)
}
}
'
flu_model <- bi_model(lines = stri_split_lines(model_str)[[1]]) %>%
fix(mu_R1 = 1/(sum(bsflu$B)/512))
obs <- bsflu %>%
select(time=date, value=B) %>%
list(Incidence=.) %>%
time_to_numeric(origin=as.Date("1978-01-21"), unit="day")
bi <- libbi(model=flu_model, obs=obs, end_time=nrow(bsflu))
rewrite(bi)
params <- c(Beta=2,mu_I=1,rho=0.9,mu_R1=1/3,mu_R2=1/2)
sim <- rbi::simulate(bi, init=as.list(params), nsamples=10)
particles_adapted <- bi %>%
sample(proposal="prior", nsamples=2000, nparticles=1024) %>%
adapt_particles(max=2**20)
proposal_adapted <- particles_adapted %>%
sample(proposal="prior", nsamples=2000) %>%
adapt_proposal(min=0.1, max=0.3, adapt="both")
