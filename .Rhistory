ode(alg = 'RK4(3)', h = 1.0, atoler = 1.0e-3, rtoler = 1.0e-8) {
dx/dt = theta*(mu-x)+sigma*e
dS/dt = -exp(x)*S*(0.1*I+E)/N
dE/dt = exp(x)*S*(0.1*I+E)/N - E*(1/k+1/gamma)
dI/dt = E/k-I*(1/gamma+0.0087)
dR/dt = (I+E)/gamma+0.0087*I
}
}
sub observation {
y ~ log_normal(log(max((E/k)/5, 0)), tau)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
input_lst <- list(N = 56536000,Forcing=Forcing)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
#LibBi wrapper
#run launches LibBi with a particular set of command line arguments
bi_model <- libbi(model,end_time = end_time, input = input_lst,
obs = obs_lst)
#RBi.helpers adapt_particle
particles_adapted <- bi_model %>%
sample(nsamples = 2000, nparticles = minParticles,
nthreads = ncores, proposal = 'prior') %>%
adapt_particles(min = minParticles, max = minParticles*500)
rm(list=ls())
# set.seed(0066661)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(pander)
library(lubridate)
library(latex2exp)
library(rbi)
library(rbi.helpers)
# Load the data
v <- read.csv("Eng_308dy.csv", header=FALSE, stringsAsFactors=FALSE)
y <- data.frame(value = v) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time, V1)
colnames(y) <- c("time","value")
L <- read.csv("Eng_308forcing.csv", header=FALSE, stringsAsFactors=FALSE)
Forcing <- data.frame(value = L) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time,V1 )
colnames(Forcing) <- c("time","value")
ncores <- 12
minParticles <- max(ncores, 16)
model_str <- "
model dureau {
obs y
state S
state E
state I
state R
state mu
state x
input N
input Forcing
param k
param gamma
param sigma // Noise driver
param theta
param a
param b
param tau
sub parameter {
k ~ truncated_gaussian(5, 1, lower = 0) // k is the period here, not the rate, i.e. 1/k is the rate
gamma ~ truncated_gaussian(9, 1, lower = 0) // gamma is the period, not the rate
sigma ~ truncated_gaussian(sqrt(0.004), 0.1, lower = 0)
theta ~ truncated_gaussian(0.05, 0.2, lower = 0)
tau ~ truncated_gaussian(0.1, 0.1, lower = 0)
a ~ truncated_gaussian(-0.02, 0.2, upper = 0)
b ~ truncated_gaussian(-0.2, 0.5, upper = 0)
}
sub proposal_parameter {
k ~ truncated_gaussian(k, 0.01, lower = 0)
gamma ~ truncated_gaussian(gamma, 0.01, lower = 0)
sigma ~ truncated_gaussian(sigma, 0.001, lower = 0)
theta ~ truncated_gaussian(theta, 0.001, lower = 0)
tau ~ gaussian(tau, 0.001)
a ~ gaussian(a, 0.001)
b ~ gaussian(b, 0.001)
}
sub initial {
x ~ gaussian(a, sigma/sqrt(2*theta) )
S <- N-1
E <- 1
I <- 0
R <- 0
}
sub transition(delta = 1) {
noise e
e ~ wiener()
mu <- a+b*Forcing
ode(alg = 'RK4(3)', h = 1.0, atoler = 1.0e-3, rtoler = 1.0e-8) {
dx/dt = theta*(mu-x)+sigma*e
dS/dt = -exp(x)*S*(0.1*I+E)/N
dE/dt = exp(x)*S*(0.1*I+E)/N - E*(1/k+1/gamma)
dI/dt = E/k-I*(1/gamma+0.0087)
dR/dt = (I+E)/gamma+0.0087*I
}
}
sub observation {
y ~ log_normal(log(max((E/k)/5, 0)), tau)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
input_lst <- list(N = 56536000,Forcing=Forcing)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
#LibBi wrapper
#run launches LibBi with a particular set of command line arguments
bi_model <- libbi(model,end_time = end_time, input = input_lst,
obs = obs_lst)
#RBi.helpers adapt_particle
particles_adapted <- bi_model %>%
sample(nsamples = 2000, nparticles = minParticles,
nthreads = ncores, proposal = 'prior') %>%
adapt_particles(min = minParticles, max = minParticles*500)
rm(list=ls())
# set.seed(0066661)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(pander)
library(lubridate)
library(latex2exp)
library(rbi)
library(rbi.helpers)
# Load the data
v <- read.csv("Eng_308dy.csv", header=FALSE, stringsAsFactors=FALSE)
y <- data.frame(value = v) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time, V1)
colnames(y) <- c("time","value")
L <- read.csv("forcing30.csv", header=FALSE, stringsAsFactors=FALSE)
Forcing <- data.frame(value = L) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time,V1 )
colnames(Forcing) <- c("time","value")
ncores <- 12
minParticles <- max(ncores, 16)
model_str <- "
model dureau {
obs y
state S
state E
state I
state R
state mu
state x
input N
input Forcing
param k
param gamma
param sigma // Noise driver
param theta
param a
param b
param tau
sub parameter {
k ~ truncated_gaussian(5, 1, lower = 0) // k is the period here, not the rate, i.e. 1/k is the rate
gamma ~ truncated_gaussian(9, 1, lower = 0) // gamma is the period, not the rate
sigma ~ truncated_gaussian(sqrt(0.004), 0.1, lower = 0)
theta ~ truncated_gaussian(0.05, 0.2, lower = 0)
tau ~ truncated_gaussian(0.1, 0.1, lower = 0)
a ~ truncated_gaussian(-0.02, 0.2, upper = 0)
b ~ truncated_gaussian(-0.2, 0.5, upper = 0)
}
sub proposal_parameter {
k ~ truncated_gaussian(k, 0.01, lower = 0)
gamma ~ truncated_gaussian(gamma, 0.01, lower = 0)
sigma ~ truncated_gaussian(sigma, 0.001, lower = 0)
theta ~ truncated_gaussian(theta, 0.001, lower = 0)
tau ~ gaussian(tau, 0.001)
a ~ gaussian(a, 0.001)
b ~ gaussian(b, 0.001)
}
sub initial {
x ~ gaussian(a, sigma/sqrt(2*theta) )
S <- N-1
E <- 1
I <- 0
R <- 0
}
sub transition(delta = 1) {
noise e
e ~ wiener()
mu <- a+b*Forcing
ode(alg = 'RK4(3)', h = 1.0, atoler = 1.0e-3, rtoler = 1.0e-8) {
dx/dt = theta*(mu-x)+sigma*e
dS/dt = -exp(x)*S*(0.1*I+E)/N
dE/dt = exp(x)*S*(0.1*I+E)/N - E*(1/k+1/gamma)
dI/dt = E/k-I*(1/gamma+0.0087)
dR/dt = (I+E)/gamma+0.0087*I
}
}
sub observation {
y ~ log_normal(log(max((E/k)/5, 0)), tau)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
input_lst <- list(N = 56536000,Forcing=Forcing)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
#LibBi wrapper
#run launches LibBi with a particular set of command line arguments
bi_model <- libbi(model,end_time = end_time, input = input_lst,
obs = obs_lst)
#RBi.helpers adapt_particle
particles_adapted <- bi_model %>%
sample(nsamples = 2000, nparticles = minParticles,
nthreads = ncores, proposal = 'prior') %>%
adapt_particles(min = minParticles, max = minParticles*500)
rm(list=ls())
set.seed(0066661)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(pander)
library(lubridate)
library(latex2exp)
library(rbi)
library(rbi.helpers)
# Load the data
v <- read.csv("Eng_308dy.csv", header=FALSE, stringsAsFactors=FALSE)
y <- data.frame(value = v) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time, V1)
colnames(y) <- c("time","value")
L <- read.csv("Eng_308forcing.csv", header=FALSE, stringsAsFactors=FALSE)
Forcing <- data.frame(value = L) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time,V1 )
colnames(Forcing) <- c("time","value")
ncores <- 12
minParticles <- max(ncores, 16)
model_str <- "
model dureau {
obs y
state S
state E
state I
state R
state x
input N
input Forcing
param k
param gamma
param sigma // Noise driver
param theta
param a
param b
sub parameter {
k ~ truncated_gaussian(5, 1, lower = 0) // k is the period here, not the rate, i.e. 1/k is the rate
gamma ~ truncated_gaussian(9, 1, lower = 0) // gamma is the period, not the rate
sigma ~ truncated_gaussian(sqrt(0.004), 0.1, lower = 0)
theta ~ truncated_gaussian(0.05, 0.2, lower = 0)
a ~ truncated_gaussian(-0.02, 0.2, upper = 0)
b ~ truncated_gaussian(-0.2, 0.5, upper = 0)
}
sub proposal_parameter {
k ~ truncated_gaussian(k, 0.01, lower = 0)
gamma ~ truncated_gaussian(gamma, 0.01, lower = 0)
sigma ~ truncated_gaussian(sigma, 0.001, lower = 0)
theta ~ truncated_gaussian(theta, 0.001, lower = 0)
a ~ gaussian(a, 0.001)
b ~ gaussian(b, 0.001)
}
sub initial {
x ~ gaussian(a, sigma/sqrt(2*theta) )
S <- N-1
E <- 1
I <- 0
R <- 0
}
sub transition(delta = 1) {
noise e
e ~ wiener()
inline mu = a+b*Forcing
ode(alg = 'RK4(3)', h = 1.0, atoler = 1.0e-3, rtoler = 1.0e-8) {
dx/dt = theta*(mu-x)+sigma*e
dS/dt = -exp(x)*S*(0.1*I+E)/N
dE/dt = exp(x)*S*(0.1*I+E)/N - E*(1/k+1/gamma)
dI/dt = E/k-I*(1/gamma+0.0087)
dR/dt = (I+E)/gamma+0.0087*I
}
}
sub observation {
y ~ poisson((E/k)/5)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
input_lst <- list(N = 56536000,Forcing=Forcing)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
init_list <- list(k=5, gamma=9, sigma=sqrt(0.004),theta=0.05,a=-0.02,b=-0.2)
#LibBi wrapper
#run launches LibBi with a particular set of command line arguments
bi_model <- libbi(model,end_time = end_time, input = input_lst,
init=init_list, obs = obs_lst)
#RBi.helpers adapt_particle
particles_adapted <- bi_model %>%
sample(nsamples = 2000, nparticles = minParticles,
nthreads = ncores, proposal = 'prior') %>%
adapt_particles(min = minParticles, max = minParticles*500)
rm(list=ls())
# set.seed(0066661)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(pander)
library(lubridate)
library(latex2exp)
library(rbi)
library(rbi.helpers)
# Load the data
v <- read.csv("covidoudg2_y221d.csv", header=FALSE, stringsAsFactors=FALSE)
y <- data.frame(value = v) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time, V1)
colnames(y) <- c("time","value")
L <- read.csv("forcing30.csv", header=FALSE, stringsAsFactors=FALSE)
Forcing <- data.frame(value = L) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time,V1 )
colnames(Forcing) <- c("time","value")
ncores <- 12
minParticles <- max(ncores, 16)
model_str <- "
model dureau {
obs y
state S
state E
state I
state R
state mu
state x
input N
input Forcing
param k
param gamma
param sigma // Noise driver
param theta
param a
param b
param tau
sub parameter {
k ~ truncated_gaussian(5, 1, lower = 0) // k is the period here, not the rate, i.e. 1/k is the rate
gamma ~ truncated_gaussian(9, 1, lower = 0) // gamma is the period, not the rate
sigma ~ truncated_gaussian(sqrt(0.004), 0.1, lower = 0)
theta ~ truncated_gaussian(0.05, 0.2, lower = 0)
tau ~ truncated_gaussian(0.1, 0.1, lower = 0)
a ~ truncated_gaussian(-0.02, 0.2, upper = 0)
b ~ truncated_gaussian(-0.2, 0.5, upper = 0)
}
sub proposal_parameter {
k ~ truncated_gaussian(k, 0.01, lower = 0)
gamma ~ truncated_gaussian(gamma, 0.01, lower = 0)
sigma ~ truncated_gaussian(sigma, 0.001, lower = 0)
theta ~ truncated_gaussian(theta, 0.001, lower = 0)
tau ~ gaussian(tau, 0.001)
a ~ gaussian(a, 0.001)
b ~ gaussian(b, 0.001)
}
sub initial {
x ~ gaussian(a, sigma/sqrt(2*theta) )
S <- N-1
E <- 1
I <- 0
R <- 0
}
sub transition(delta = 1) {
noise e
e ~ wiener()
mu <- a+b*Forcing
ode(alg = 'RK4(3)', h = 1.0, atoler = 1.0e-3, rtoler = 1.0e-8) {
dx/dt = theta*(mu-x)+sigma*e
dS/dt = -exp(x)*S*(0.1*I+E)/N
dE/dt = exp(x)*S*(0.1*I+E)/N - E*(1/k+1/gamma)
dI/dt = E/k-I*(1/gamma+0.0087)
dR/dt = (I+E)/gamma+0.0087*I
}
}
sub observation {
y ~ log_normal(log(max((E/k)/5, 0)), tau)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
input_lst <- list(N = 56536000,Forcing=Forcing)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
#LibBi wrapper
#run launches LibBi with a particular set of command line arguments
bi_model <- libbi(model,end_time = end_time, input = input_lst,
obs = obs_lst)
#RBi.helpers adapt_particle
particles_adapted <- bi_model %>%
sample(nsamples = 2000, nparticles = minParticles,
nthreads = ncores, proposal = 'prior') %>%
adapt_particles(min = minParticles, max = minParticles*500)
v <- read.csv("Eng_44w_y.csv", header=FALSE, stringsAsFactors=FALSE) %>%
rowSums()
y <- data.frame(value = v) %>%
mutate(time = seq(7, by = 7, length.out = n())) %>%
dplyr::select(time, value)
L <- read.csv("Eng_308forcing.csv", header=FALSE, stringsAsFactors=FALSE)
Forcing <- data.frame(value = L) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time,V1 )
colnames(Forcing) <- c("time","value")
ncores <- 12
minParticles <- max(ncores, 16)
model_str <- "
model dureau {
obs y
state S
state E
state I
state R
state x
state Z
input N
input Forcing
param k
param gamma
param sigma // Noise driver
param theta
param a
param b
param tau
sub parameter {
k ~ truncated_gaussian(5, 1, lower = 0) // k is the period here, not the rate, i.e. 1/k is the rate
gamma ~ truncated_gaussian(9, 1, lower = 0) // gamma is the period, not the rate
sigma ~ truncated_gaussian(sqrt(0.004), 0.1, lower = 0)
theta ~ truncated_gaussian(0.05, 0.2, lower = 0)
tau ~ truncated_gaussian(0.1, 0.1, lower = 0)
a ~ truncated_gaussian(-0.02, 0.2, upper = 0)
b ~ truncated_gaussian(-0.2, 0.5, upper = 0)
}
sub proposal_parameter {
k ~ truncated_gaussian(k, 0.01, lower = 0)
gamma ~ truncated_gaussian(gamma, 0.01, lower = 0)
sigma ~ truncated_gaussian(sigma, 0.001, lower = 0)
theta ~ truncated_gaussian(theta, 0.001, lower = 0)
tau ~ gaussian(tau, 0.001)
a ~ gaussian(a, 0.001)
b ~ gaussian(b, 0.001)
}
sub initial {
x ~ gaussian(a, sigma/sqrt(2*theta) )
S <- N-1
E <- 1
I <- 0
R <- 0
Z <- 1/k
}
sub transition(delta = 1) {
Z <- ((t_now) % 7 == 0 ? 0 : Z)
noise e
e ~ wiener()
inline mu = a+b*Forcing
ode(alg = 'RK4(3)', h = 1.0, atoler = 1.0e-3, rtoler = 1.0e-8) {
dx/dt = theta*(mu-x)+sigma*e
dS/dt = -exp(x)*S*(0.1*I+E)/N
dE/dt = exp(x)*S*(0.1*I+E)/N - E*(1/k+1/gamma)
dI/dt = E/k-I*(1/gamma+0.0087)
dR/dt = (I+E)/gamma+0.0087*I
dZ/dt = E/k
}
}
sub observation {
y ~ log_normal(log(max(Z/5, 0)), tau)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
input_lst <- list(N = 52196381,Forcing=Forcing)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
init_list <- list(k=5, gamma=9, sigma=sqrt(0.004),theta=0.05,tau=0.1,a=-0.02,b=-0.2)
#LibBi wrapper
#run launches LibBi with a particular set of command line arguments
bi_model <- libbi(model,end_time = end_time, input = input_lst,
init=init_list, obs = obs_lst)
#RBi.helpers adapt_particle
particles_adapted <- bi_model %>%
sample(nsamples = 2000, nparticles = minParticles,
nthreads = ncores, proposal = 'prior') %>%
adapt_particles(min = minParticles, max = minParticles*500)
Mmodel <- read.csv("h1n1bm_model1.csv", header=TRUE, stringsAsFactors=FALSE)
S<-Mmodel[,4]
E<-Mmodel[,5]
I<-Mmodel[,6]
R<-Mmodel[,7]
View(Mmodel)
Mmodel <- read.csv("h1n1bm_model1.csv", header=TRUE, stringsAsFactors=FALSE)
S<-Mmodel[,7]
E<-Mmodel[,9]
I<-Mmodel[,11]
R<-Mmodel[,13]
Mmodel <- read.csv("h1n1bm_model1.csv", header=TRUE, stringsAsFactors=FALSE)
S<-Mmodel[-1,7]
E<-Mmodel[-1,9]
I<-Mmodel[-1,11]
R<-Mmodel[-1,13]
v <- read.csv("h1n1bm_ydaily1.csv", header=FALSE, stringsAsFactors=FALSE)
y <- data.frame(value = v) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time, V1)
colnames(y) <- c("time","value")
View(y)
