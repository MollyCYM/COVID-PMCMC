log(dtruncnorm(theta_chain[iter - 1, 2], a = -1, b = 1, mean = 0.9, sd = 0.1)) +
log(dtruncnorm(theta_chain[iter - 1, 3], a = 0, b = Inf, mean = sqrt(0.05), sd = 0.1))
log_prior_proposed <- log(dtruncnorm(theta_proposal[1], a = 0, b = Inf, mean = 0.8, sd = 0.1)) +
log(dtruncnorm(theta_proposal[2], a = -1, b = 1, mean = 0.9, sd = 0.1)) +
log(dtruncnorm(theta_proposal[3], a = 0, b = Inf, mean = sqrt(0.05), sd = 0.1))
log_prior_ratio <- log_prior_proposed - log_prior_current
# Compute log likelihood ratio
log_likelihood_ratio <- log_likelihood_proposal - log_likelihood_chain[iter - 1]
# Calculate the log-proposal density for theta_proposed given theta_current
log_proposal_current_to_proposed <- log(dtruncnorm(theta_proposal[1], a = 0, b = Inf, mean = theta_chain[iter - 1, 1], sd = 0.0005)) +
log(dtruncnorm(theta_proposal[2], a = -1, b = 1, mean = theta_chain[iter - 1, 2], sd = 0.0005)) +
log(dtruncnorm(theta_proposal[3], a = 0, b = Inf, mean = theta_chain[iter - 1, 3], sd = 0.0001))
# Calculate the log-proposal density for theta_current given theta_proposed (reverse move)
log_proposal_proposed_to_current <- log(dtruncnorm(theta_chain[iter - 1, 1], a = 0, b = Inf, mean = theta_proposal[1], sd = 0.0005)) +
log(dtruncnorm(theta_chain[iter - 1, 2], a = -1, b = 1, mean = theta_proposal[2], sd = 0.0005)) +
log(dtruncnorm(theta_chain[iter - 1, 3], a = 0, b = Inf, mean = theta_proposal[3], sd = 0.0001))
log_proposal_ratio <- log_proposal_proposed_to_current - log_proposal_current_to_proposed
# Calculate the final log acceptance ratio
log_accept_ratio <- log_likelihood_ratio + log_prior_ratio + log_proposal_ratio
# Accept or reject
if (log(runif(1)) < log_accept_ratio) {
theta_chain[iter, ] <- theta_proposal
log_likelihood_chain[iter] <- log_likelihood_proposal
accepted <- accepted + 1  # Increment the acceptance counter
} else {
theta_chain[iter, ] <- theta_chain[iter - 1, ]
log_likelihood_chain[iter] <- log_likelihood_chain[iter - 1]
}
}
# Calculate acceptance rate
acceptance_rate <- accepted / (n_iter - 1)
return(list(
theta_chain = theta_chain,
log_likelihood_chain = log_likelihood_chain,
final_alpha = res_proposal$alpha_particles,
acceptance_rate = acceptance_rate  # Return acceptance rate
))
}
result <- pmmh(y, n_iter, n_particles)
View(result)
alpha_estimate <- apply(result$final_alpha, 2, mean)  # Take mean of particles
x_data <- read.csv('svmgen_alpha1.csv', header = FALSE)  # Assuming your observations are in the first column
# Remove the first two rows
x_data <- x_data[-c(1, 1), ]
# Keep only the second column
alpha_true <- x_data[, 2]
# Plot the new generated observations
plot(alpha_true, type = "l", col = "blue", lwd = 2,
main = "Comparison of Input Observations and New Generated Observations",
xlab = "Time", ylab = "Observations")
lines(alpha_estimate, col = "red", lwd = 2)
rm(list = ls())
# Load necessary packages
library(astsa)         # For time series data simulation
library(pomp)          # Particle filtering
library(mvtnorm)       # Multivariate normal distribution
library(truncnorm)
# Model Parameters
n_iter <- 2000      # Number of MCMC iterations
n_particles <- 100   # Number of particles for the bootstrap particle filter
# Load your data and clean it
y_data <- read.csv('svmgen_y1.csv', header = FALSE, skip = 1)  # Skip first row
y <- as.numeric(y_data[, 2])
# Proposal distribution for PMMH (Random walk Metropolis-Hastings) with truncated normals
propose_params <- function(theta) {
beta_proposal <- rtruncnorm(1, a = 0, b = Inf, mean = theta[1], sd = 0.005)      # Truncated at 0 for beta
phi_proposal <- rtruncnorm(1, a = -1, b = 1, mean = theta[2], sd = 0.005)        # Truncated between -1 and 1 for phi
sigma_eta_proposal <- rtruncnorm(1, a = 0, b = Inf, mean = theta[3], sd = 0.001) # Truncated at 0 for sigma_eta
return(c(beta_proposal, phi_proposal, sigma_eta_proposal))
}
# Prior distributions
prior_density <- function(theta) {
dtruncnorm(theta[1], a = 0, b = Inf, mean = 0.8, sd = 0.1) +  # Truncated normal for beta (positive values)
dtruncnorm(theta[2], a = -1, b = 1, mean = 0.9, sd = 0.1) +  # Truncated normal for phi (between -1 and 1)
dtruncnorm(theta[3],  a = 0, b = Inf, mean = sqrt(0.05), sd = 0.1)  # Truncated normal for sigma_eta (positive values)
}
# Bootstrap particle filter for the SV model
bootstrap_filter <- function(y, theta, n_particles) {
T <- length(y)
beta <- theta[1]
phi <- theta[2]
sigma_eta <- theta[3]
alpha_particles <- matrix(0, n_particles, T)
weights <- matrix(0, n_particles, T)
unnormalized_weights <- matrix(0, n_particles, T)  # To store unnormalized weights
# Initial state distribution
alpha_particles[, 1] <- rnorm(n_particles, mean = 0, sd = sigma_eta / sqrt(1 - phi^2))
for (t in 1:T) {
if (t > 1) {
alpha_particles[, t] <- phi * alpha_particles[, t-1] + rnorm(n_particles, 0, sigma_eta)
}
# Calculate the unnormalized weights (without dividing by sum)
unnormalized_weights[, t] <- dnorm(y[t], mean = 0, sd = beta * exp(alpha_particles[, t] / 2))
# Normalize weights for resampling (but don't use this for log-likelihood)
weights[, t] <- unnormalized_weights[, t] / sum(unnormalized_weights[, t]) # Normalizing for resampling only
# Resampling step
indices <- sample(1:n_particles, size = n_particles, prob = weights[, t], replace = TRUE)
alpha_particles[, t] <- alpha_particles[indices, t]
}
# Compute the log-likelihood using unnormalized weights
log_likelihood <- sum(log(colMeans(unnormalized_weights)))
return(list(alpha_particles = alpha_particles, log_likelihood = log_likelihood))
}
# PMMH Algorithm
pmmh <- function(y, n_iter, n_particles) {
theta_chain <- matrix(0, n_iter, 3)
theta_chain[1, ] <- c(0.8, 0.9, 0.1)  # Initial values for beta, phi, sigma_eta
log_likelihood_chain <- numeric(n_iter)
res <- bootstrap_filter(y, theta_chain[1, ], n_particles)
log_likelihood_chain[1] <- res$log_likelihood
accepted <- 0  # Counter for accepted proposals
for (iter in 2:n_iter) {
theta_proposal <- propose_params(theta_chain[iter - 1, ])
# # Check prior constraints
# if (theta_proposal[1] <= 0 || theta_proposal[3] <= 0 || abs(theta_proposal[2]) > 1) {
#   theta_chain[iter, ] <- theta_chain[iter - 1, ]
#   log_likelihood_chain[iter] <- log_likelihood_chain[iter - 1]
#   next
# }
# Bootstrap particle filter for the proposed parameters
res_proposal <- bootstrap_filter(y, theta_proposal, n_particles)
log_likelihood_proposal <- res_proposal$log_likelihood
# Calculate log-prior ratio
log_prior_current <- log(dtruncnorm(theta_chain[iter - 1, 1], a = 0, b = Inf, mean = 0.8, sd = 0.1)) +
log(dtruncnorm(theta_chain[iter - 1, 2], a = -1, b = 1, mean = 0.9, sd = 0.1)) +
log(dtruncnorm(theta_chain[iter - 1, 3], a = 0, b = Inf, mean = sqrt(0.05), sd = 0.1))
log_prior_proposed <- log(dtruncnorm(theta_proposal[1], a = 0, b = Inf, mean = 0.8, sd = 0.1)) +
log(dtruncnorm(theta_proposal[2], a = -1, b = 1, mean = 0.9, sd = 0.1)) +
log(dtruncnorm(theta_proposal[3], a = 0, b = Inf, mean = sqrt(0.05), sd = 0.1))
log_prior_ratio <- log_prior_proposed - log_prior_current
# Compute log likelihood ratio
log_likelihood_ratio <- log_likelihood_proposal - log_likelihood_chain[iter - 1]
# Calculate the log-proposal density for theta_proposed given theta_current
log_proposal_current_to_proposed <- log(dtruncnorm(theta_proposal[1], a = 0, b = Inf, mean = theta_chain[iter - 1, 1], sd = 0.005)) +
log(dtruncnorm(theta_proposal[2], a = -1, b = 1, mean = theta_chain[iter - 1, 2], sd = 0.005)) +
log(dtruncnorm(theta_proposal[3], a = 0, b = Inf, mean = theta_chain[iter - 1, 3], sd = 0.001))
# Calculate the log-proposal density for theta_current given theta_proposed (reverse move)
log_proposal_proposed_to_current <- log(dtruncnorm(theta_chain[iter - 1, 1], a = 0, b = Inf, mean = theta_proposal[1], sd = 0.005)) +
log(dtruncnorm(theta_chain[iter - 1, 2], a = -1, b = 1, mean = theta_proposal[2], sd = 0.005)) +
log(dtruncnorm(theta_chain[iter - 1, 3], a = 0, b = Inf, mean = theta_proposal[3], sd = 0.001))
log_proposal_ratio <- log_proposal_proposed_to_current - log_proposal_current_to_proposed
# Calculate the final log acceptance ratio
log_accept_ratio <- log_likelihood_ratio + log_prior_ratio + log_proposal_ratio
# Accept or reject
if (log(runif(1)) < log_accept_ratio) {
theta_chain[iter, ] <- theta_proposal
log_likelihood_chain[iter] <- log_likelihood_proposal
accepted <- accepted + 1  # Increment the acceptance counter
} else {
theta_chain[iter, ] <- theta_chain[iter - 1, ]
log_likelihood_chain[iter] <- log_likelihood_chain[iter - 1]
}
}
# Calculate acceptance rate
acceptance_rate <- accepted / (n_iter - 1)
return(list(
theta_chain = theta_chain,
log_likelihood_chain = log_likelihood_chain,
final_alpha = res_proposal$alpha_particles,
acceptance_rate = acceptance_rate  # Return acceptance rate
))
}
result <- pmmh(y, n_iter, n_particles)
View(result)
rm(list = ls())
# Load necessary packages
library(astsa)         # For time series data simulation
library(pomp)          # Particle filtering
library(mvtnorm)       # Multivariate normal distribution
library(truncnorm)
# Model Parameters
n_iter <- 2000      # Number of MCMC iterations
n_particles <- 100   # Number of particles for the bootstrap particle filter
# Load your data and clean it
y_data <- read.csv('svmgen_y1.csv', header = FALSE, skip = 1)  # Skip first row
y <- as.numeric(y_data[, 2])
# Proposal distribution for PMMH (Random walk Metropolis-Hastings) with truncated normals
propose_params <- function(theta) {
beta_proposal <- rtruncnorm(1, a = 0, b = Inf, mean = theta[1], sd = 0.1)      # Truncated at 0 for beta
phi_proposal <- rtruncnorm(1, a = -1, b = 1, mean = theta[2], sd = 1)        # Truncated between -1 and 1 for phi
sigma_eta_proposal <- rtruncnorm(1, a = 0, b = Inf, mean = theta[3], sd = 0.001) # Truncated at 0 for sigma_eta
return(c(beta_proposal, phi_proposal, sigma_eta_proposal))
}
# Prior distributions
prior_density <- function(theta) {
dtruncnorm(theta[1], a = 0, b = Inf, mean = 0.8, sd = 0.1) +  # Truncated normal for beta (positive values)
dtruncnorm(theta[2], a = -1, b = 1, mean = 0.9, sd = 0.1) +  # Truncated normal for phi (between -1 and 1)
dtruncnorm(theta[3],  a = 0, b = Inf, mean = sqrt(0.05), sd = 0.1)  # Truncated normal for sigma_eta (positive values)
}
# Bootstrap particle filter for the SV model
bootstrap_filter <- function(y, theta, n_particles) {
T <- length(y)
beta <- theta[1]
phi <- theta[2]
sigma_eta <- theta[3]
alpha_particles <- matrix(0, n_particles, T)
weights <- matrix(0, n_particles, T)
unnormalized_weights <- matrix(0, n_particles, T)  # To store unnormalized weights
# Initial state distribution
alpha_particles[, 1] <- rnorm(n_particles, mean = 0, sd = sigma_eta / sqrt(1 - phi^2))
for (t in 1:T) {
if (t > 1) {
alpha_particles[, t] <- phi * alpha_particles[, t-1] + rnorm(n_particles, 0, sigma_eta)
}
# Calculate the unnormalized weights (without dividing by sum)
unnormalized_weights[, t] <- dnorm(y[t], mean = 0, sd = beta * exp(alpha_particles[, t] / 2))
# Normalize weights for resampling (but don't use this for log-likelihood)
weights[, t] <- unnormalized_weights[, t] / sum(unnormalized_weights[, t]) # Normalizing for resampling only
# Resampling step
indices <- sample(1:n_particles, size = n_particles, prob = weights[, t], replace = TRUE)
alpha_particles[, t] <- alpha_particles[indices, t]
}
# Compute the log-likelihood using unnormalized weights
log_likelihood <- sum(log(colMeans(unnormalized_weights)))
return(list(alpha_particles = alpha_particles, log_likelihood = log_likelihood))
}
# PMMH Algorithm
pmmh <- function(y, n_iter, n_particles) {
theta_chain <- matrix(0, n_iter, 3)
theta_chain[1, ] <- c(0.8, 0.9, 0.1)  # Initial values for beta, phi, sigma_eta
log_likelihood_chain <- numeric(n_iter)
res <- bootstrap_filter(y, theta_chain[1, ], n_particles)
log_likelihood_chain[1] <- res$log_likelihood
accepted <- 0  # Counter for accepted proposals
for (iter in 2:n_iter) {
theta_proposal <- propose_params(theta_chain[iter - 1, ])
# # Check prior constraints
# if (theta_proposal[1] <= 0 || theta_proposal[3] <= 0 || abs(theta_proposal[2]) > 1) {
#   theta_chain[iter, ] <- theta_chain[iter - 1, ]
#   log_likelihood_chain[iter] <- log_likelihood_chain[iter - 1]
#   next
# }
# Bootstrap particle filter for the proposed parameters
res_proposal <- bootstrap_filter(y, theta_proposal, n_particles)
log_likelihood_proposal <- res_proposal$log_likelihood
# Calculate log-prior ratio
log_prior_current <- log(dtruncnorm(theta_chain[iter - 1, 1], a = 0, b = Inf, mean = 0.8, sd = 0.1)) +
log(dtruncnorm(theta_chain[iter - 1, 2], a = -1, b = 1, mean = 0.9, sd = 0.1)) +
log(dtruncnorm(theta_chain[iter - 1, 3], a = 0, b = Inf, mean = sqrt(0.05), sd = 0.1))
log_prior_proposed <- log(dtruncnorm(theta_proposal[1], a = 0, b = Inf, mean = 0.8, sd = 0.1)) +
log(dtruncnorm(theta_proposal[2], a = -1, b = 1, mean = 0.9, sd = 0.1)) +
log(dtruncnorm(theta_proposal[3], a = 0, b = Inf, mean = sqrt(0.05), sd = 0.1))
log_prior_ratio <- log_prior_proposed - log_prior_current
# Compute log likelihood ratio
log_likelihood_ratio <- log_likelihood_proposal - log_likelihood_chain[iter - 1]
# Calculate the log-proposal density for theta_proposed given theta_current
log_proposal_current_to_proposed <- log(dtruncnorm(theta_proposal[1], a = 0, b = Inf, mean = theta_chain[iter - 1, 1], sd = 0.1)) +
log(dtruncnorm(theta_proposal[2], a = -1, b = 1, mean = theta_chain[iter - 1, 2], sd = 1)) +
log(dtruncnorm(theta_proposal[3], a = 0, b = Inf, mean = theta_chain[iter - 1, 3], sd = 0.001))
# Calculate the log-proposal density for theta_current given theta_proposed (reverse move)
log_proposal_proposed_to_current <- log(dtruncnorm(theta_chain[iter - 1, 1], a = 0, b = Inf, mean = theta_proposal[1], sd = 0.1)) +
log(dtruncnorm(theta_chain[iter - 1, 2], a = -1, b = 1, mean = theta_proposal[2], sd = 1)) +
log(dtruncnorm(theta_chain[iter - 1, 3], a = 0, b = Inf, mean = theta_proposal[3], sd = 0.001))
log_proposal_ratio <- log_proposal_proposed_to_current - log_proposal_current_to_proposed
# Calculate the final log acceptance ratio
log_accept_ratio <- log_likelihood_ratio + log_prior_ratio + log_proposal_ratio
# Accept or reject
if (log(runif(1)) < log_accept_ratio) {
theta_chain[iter, ] <- theta_proposal
log_likelihood_chain[iter] <- log_likelihood_proposal
accepted <- accepted + 1  # Increment the acceptance counter
} else {
theta_chain[iter, ] <- theta_chain[iter - 1, ]
log_likelihood_chain[iter] <- log_likelihood_chain[iter - 1]
}
}
# Calculate acceptance rate
acceptance_rate <- accepted / (n_iter - 1)
return(list(
theta_chain = theta_chain,
log_likelihood_chain = log_likelihood_chain,
final_alpha = res_proposal$alpha_particles,
acceptance_rate = acceptance_rate  # Return acceptance rate
))
}
result <- pmmh(y, n_iter, n_particles)
View(result)
rm(list = ls())
# Load necessary packages
library(astsa)         # For time series data simulation
library(pomp)          # Particle filtering
library(mvtnorm)       # Multivariate normal distribution
library(truncnorm)
# Model Parameters
n_iter <- 2000      # Number of MCMC iterations
n_particles <- 100   # Number of particles for the bootstrap particle filter
# Load your data and clean it
y_data <- read.csv('svmgen_y1.csv', header = FALSE, skip = 1)  # Skip first row
y <- as.numeric(y_data[, 2])
# Proposal distribution for PMMH (Random walk Metropolis-Hastings) with truncated normals
propose_params <- function(theta) {
beta_proposal <- rtruncnorm(1, a = 0, b = Inf, mean = theta[1], sd = 0.01)      # Truncated at 0 for beta
phi_proposal <- rtruncnorm(1, a = -1, b = 1, mean = theta[2], sd = 0.1)        # Truncated between -1 and 1 for phi
sigma_eta_proposal <- rtruncnorm(1, a = 0, b = Inf, mean = theta[3], sd = 0.001) # Truncated at 0 for sigma_eta
return(c(beta_proposal, phi_proposal, sigma_eta_proposal))
}
# Prior distributions
prior_density <- function(theta) {
dtruncnorm(theta[1], a = 0, b = Inf, mean = 0.8, sd = 0.1) +  # Truncated normal for beta (positive values)
dtruncnorm(theta[2], a = -1, b = 1, mean = 0.9, sd = 0.1) +  # Truncated normal for phi (between -1 and 1)
dtruncnorm(theta[3],  a = 0, b = Inf, mean = sqrt(0.05), sd = 0.1)  # Truncated normal for sigma_eta (positive values)
}
# Bootstrap particle filter for the SV model
bootstrap_filter <- function(y, theta, n_particles) {
T <- length(y)
beta <- theta[1]
phi <- theta[2]
sigma_eta <- theta[3]
alpha_particles <- matrix(0, n_particles, T)
weights <- matrix(0, n_particles, T)
unnormalized_weights <- matrix(0, n_particles, T)  # To store unnormalized weights
# Initial state distribution
alpha_particles[, 1] <- rnorm(n_particles, mean = 0, sd = sigma_eta / sqrt(1 - phi^2))
for (t in 1:T) {
if (t > 1) {
alpha_particles[, t] <- phi * alpha_particles[, t-1] + rnorm(n_particles, 0, sigma_eta)
}
# Calculate the unnormalized weights (without dividing by sum)
unnormalized_weights[, t] <- dnorm(y[t], mean = 0, sd = beta * exp(alpha_particles[, t] / 2))
# Normalize weights for resampling (but don't use this for log-likelihood)
weights[, t] <- unnormalized_weights[, t] / sum(unnormalized_weights[, t]) # Normalizing for resampling only
# Resampling step
indices <- sample(1:n_particles, size = n_particles, prob = weights[, t], replace = TRUE)
alpha_particles[, t] <- alpha_particles[indices, t]
}
# Compute the log-likelihood using unnormalized weights
log_likelihood <- sum(log(colMeans(unnormalized_weights)))
return(list(alpha_particles = alpha_particles, log_likelihood = log_likelihood))
}
# PMMH Algorithm
pmmh <- function(y, n_iter, n_particles) {
theta_chain <- matrix(0, n_iter, 3)
theta_chain[1, ] <- c(0.8, 0.9, 0.1)  # Initial values for beta, phi, sigma_eta
log_likelihood_chain <- numeric(n_iter)
res <- bootstrap_filter(y, theta_chain[1, ], n_particles)
log_likelihood_chain[1] <- res$log_likelihood
accepted <- 0  # Counter for accepted proposals
for (iter in 2:n_iter) {
theta_proposal <- propose_params(theta_chain[iter - 1, ])
# # Check prior constraints
# if (theta_proposal[1] <= 0 || theta_proposal[3] <= 0 || abs(theta_proposal[2]) > 1) {
#   theta_chain[iter, ] <- theta_chain[iter - 1, ]
#   log_likelihood_chain[iter] <- log_likelihood_chain[iter - 1]
#   next
# }
# Bootstrap particle filter for the proposed parameters
res_proposal <- bootstrap_filter(y, theta_proposal, n_particles)
log_likelihood_proposal <- res_proposal$log_likelihood
# Calculate log-prior ratio
log_prior_current <- log(dtruncnorm(theta_chain[iter - 1, 1], a = 0, b = Inf, mean = 0.8, sd = 0.1)) +
log(dtruncnorm(theta_chain[iter - 1, 2], a = -1, b = 1, mean = 0.9, sd = 0.1)) +
log(dtruncnorm(theta_chain[iter - 1, 3], a = 0, b = Inf, mean = sqrt(0.05), sd = 0.1))
log_prior_proposed <- log(dtruncnorm(theta_proposal[1], a = 0, b = Inf, mean = 0.8, sd = 0.1)) +
log(dtruncnorm(theta_proposal[2], a = -1, b = 1, mean = 0.9, sd = 0.1)) +
log(dtruncnorm(theta_proposal[3], a = 0, b = Inf, mean = sqrt(0.05), sd = 0.1))
log_prior_ratio <- log_prior_proposed - log_prior_current
# Compute log likelihood ratio
log_likelihood_ratio <- log_likelihood_proposal - log_likelihood_chain[iter - 1]
# Calculate the log-proposal density for theta_proposed given theta_current
log_proposal_current_to_proposed <- log(dtruncnorm(theta_proposal[1], a = 0, b = Inf, mean = theta_chain[iter - 1, 1], sd = 0.01)) +
log(dtruncnorm(theta_proposal[2], a = -1, b = 1, mean = theta_chain[iter - 1, 2], sd = 0.1)) +
log(dtruncnorm(theta_proposal[3], a = 0, b = Inf, mean = theta_chain[iter - 1, 3], sd = 0.001))
# Calculate the log-proposal density for theta_current given theta_proposed (reverse move)
log_proposal_proposed_to_current <- log(dtruncnorm(theta_chain[iter - 1, 1], a = 0, b = Inf, mean = theta_proposal[1], sd = 0.01)) +
log(dtruncnorm(theta_chain[iter - 1, 2], a = -1, b = 1, mean = theta_proposal[2], sd = 0.1)) +
log(dtruncnorm(theta_chain[iter - 1, 3], a = 0, b = Inf, mean = theta_proposal[3], sd = 0.001))
log_proposal_ratio <- log_proposal_proposed_to_current - log_proposal_current_to_proposed
# Calculate the final log acceptance ratio
log_accept_ratio <- log_likelihood_ratio + log_prior_ratio + log_proposal_ratio
# Accept or reject
if (log(runif(1)) < log_accept_ratio) {
theta_chain[iter, ] <- theta_proposal
log_likelihood_chain[iter] <- log_likelihood_proposal
accepted <- accepted + 1  # Increment the acceptance counter
} else {
theta_chain[iter, ] <- theta_chain[iter - 1, ]
log_likelihood_chain[iter] <- log_likelihood_chain[iter - 1]
}
}
# Calculate acceptance rate
acceptance_rate <- accepted / (n_iter - 1)
return(list(
theta_chain = theta_chain,
log_likelihood_chain = log_likelihood_chain,
final_alpha = res_proposal$alpha_particles,
acceptance_rate = acceptance_rate  # Return acceptance rate
))
}
result <- pmmh(y, n_iter, n_particles)
View(result)
rm(list=ls())
set.seed(0000889977)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(pander)
library(lubridate)
library(latex2exp)
library(rbi)
library(rbi.helpers)
ncores <- 12
# Load the data
v <- read.csv("svm_y2r.csv", header=FALSE, stringsAsFactors=FALSE)
y <- data.frame(value = v) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time, V1)
colnames(y) <- c("time","value")
model_str <- "
model StochasticVolatility {
obs y
state alpha
noise epsilon
param beta
param phi
param sigma_eta
sub parameter {
beta ~ truncated_gaussian(0.8, 0.1, lower = 0)
phi ~ truncated_gaussian(0.45, 1, lower = -1, upper=1)
sigma_eta ~ truncated_gaussian(sqrt(0.04), 0.1, lower=0)
}
sub proposal_parameter {
beta ~ truncated_gaussian(beta, 0.1, lower = 0)
phi ~ truncated_gaussian(phi, 0.01, lower = -1, upper=1)
sigma_eta ~ truncated_gaussian(sigma_eta, 0.001)
}
sub initial {
/* stationary distribution for alpha */
alpha ~ normal(0.0, sqrt(sigma_eta**2/(1.0 - phi**2)));
}
sub transition {
epsilon ~ normal(0,1);
alpha <- phi*alpha + sigma_eta*epsilon;
}
sub observation {
y ~ normal(0, beta*exp(0.5*alpha));
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
init_list <- list(beta=0.6,phi=0.975,sigma_eta=sqrt(0.02))
#LibBi wrapper
#run launches LibBi with a particular set of command line arguments
bi_model <- libbi(model,end_time = end_time,
init=init_list, obs = obs_lst)
#RBi.helpers adapt_particle
particles_adapted <- bi_model %>%
sample(nsamples = 2000, nparticles = 16,
nthreads = ncores, proposal = 'prior') %>%
adapt_particles(min = 16, max = 16*500)
rm(list = ls())
gc()
rm(list=ls())
set.seed(0000889977)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(pander)
library(lubridate)
library(latex2exp)
library(rbi)
library(rbi.helpers)
ncores <- 12
# Load the data
v <- read.csv("svm_y2r.csv", header=FALSE, stringsAsFactors=FALSE)
y <- data.frame(value = v) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time, V1)
colnames(y) <- c("time","value")
model_str <- "
model StochasticVolatility {
obs y
state alpha
noise epsilon
param beta
param phi
param sigma_eta
sub parameter {
beta ~ truncated_gaussian(0.8, 0.1, lower = 0)
phi ~ truncated_gaussian(0.45, 1, lower = -1, upper=1)
sigma_eta ~ truncated_gaussian(sqrt(0.04), 0.1, lower=0)
}
sub proposal_parameter {
beta ~ truncated_gaussian(beta, 0.1, lower = 0)
phi ~ truncated_gaussian(phi, 0.01, lower = -1, upper=1)
sigma_eta ~ truncated_gaussian(sigma_eta, 0.001)
}
sub initial {
/* stationary distribution for alpha */
alpha ~ normal(0.0, sqrt(sigma_eta**2/(1.0 - phi**2)));
}
sub transition {
epsilon ~ normal(0,1);
alpha <- phi*alpha + sigma_eta*epsilon;
}
sub observation {
y ~ normal(0, beta*exp(0.5*alpha));
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
init_list <- list(beta=0.6,phi=0.975,sigma_eta=sqrt(0.02))
#LibBi wrapper
#run launches LibBi with a particular set of command line arguments
bi_model <- libbi(model,end_time = end_time,
init=init_list, obs = obs_lst)
#RBi.helpers adapt_particle
particles_adapted <- bi_model %>%
sample(nsamples = 2000, nparticles = 16,
nthreads = ncores, proposal = 'prior') %>%
adapt_particles(min = 16, max = 16*500)
