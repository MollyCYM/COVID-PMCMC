y ~ log_normal(log(max(Z/10.0, 0)), tau)
}
sub proposal_parameter {
k ~ gaussian(k, 0.005)
sigma ~ gaussian(sigma, 0.01)
gamma ~ gaussian(gamma, 0.01)
x0 ~ gaussian(x0, 0.05)
E0 ~ gaussian(E0, 0.05)
I0 ~ gaussian(I0, 0.05)
R0 ~ gaussian(R0, 0.05)
tau ~ gaussian(tau, 0.05)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
input_lst <- list(N = 52196381)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
bi <- sample(bi_model, end_time = end_time, input = input_lst, obs = obs_lst, nsamples = 1000, nparticles = minParticles, nthreads = ncores, proposal = 'prior') %>%
adapt_particles(min = minParticles, max = minParticles*200) %>%
adapt_proposal(min = 0.05, max = 0.4) %>%
sample(nsamples = 5000, thin = 5) %>% # burn in
sample(nsamples = 5000, thin = 5)
locate_libbi(path_to_libbi)
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
input_lst <- list(N = 52196381)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
bi <- sample(bi_model, end_time = end_time, input = input_lst, obs = obs_lst, nsamples = 1000, nparticles = minParticles, nthreads = ncores, proposal = 'prior') %>%
adapt_particles(min = minParticles, max = minParticles*200) %>%
adapt_proposal(min = 0.05, max = 0.4) %>%
sample(nsamples = 5000, thin = 5) %>% # burn in
sample(nsamples = 5000, thin = 5)
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
input_lst <- list(N = 52196381)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
bi <- sample(bi_model, end_time = end_time, input = input_lst, obs = obs_lst, nsamples = 1000, nparticles = minParticles, nthreads = ncores, proposal = 'prior') %>%
adapt_particles(min = minParticles, max = minParticles*200) %>%
adapt_proposal(min = 0.05, max = 0.4) %>%
sample(nsamples = 5000, thin = 5) %>% # burn in
sample(nsamples = 5000, thin = 5)
\libbi
/libbi
libbi
path_to_libbi
'options(path_to_libbi="/insert/full/path/here")
l
''
.
''
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
input_lst <- list(N = 52196381)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
bi <- sample(bi_model, end_time = end_time, input = input_lst, obs = obs_lst, nsamples = 1000, nparticles = minParticles, nthreads = ncores, proposal = 'prior') %>%
adapt_particles(min = minParticles, max = minParticles*200) %>%
adapt_proposal(min = 0.05, max = 0.4) %>%
sample(nsamples = 5000, thin = 5) %>% # burn in
sample(nsamples = 5000, thin = 5)
help(locate_libbi)
options(path_to_libbi="/insert/full/path/here")
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
input_lst <- list(N = 52196381)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
bi <- sample(bi_model, end_time = end_time, input = input_lst, obs = obs_lst, nsamples = 1000, nparticles = minParticles, nthreads = ncores, proposal = 'prior') %>%
adapt_particles(min = minParticles, max = minParticles*200) %>%
adapt_proposal(min = 0.05, max = 0.4) %>%
sample(nsamples = 5000, thin = 5) %>% # burn in
sample(nsamples = 5000, thin = 5)
brew install libbi
install.packages('libbi')
install.packages('Homebrew')
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(pander)
library(lubridate)
library(latex2exp)
knitr::opts_chunk$set(cache = T, echo = F, message = F, warning = F, dpi = 300)
theme_set(theme_bw())
# Appropiate colours for colourblind
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#999999")
scale_colour_discrete <- function(...)
scale_colour_manual(..., values = cbPalette)
scale_fill_discrete <- function(...)
scale_fill_manual(..., values = cbPalette)
library(rbi)
library(rbi.helpers)
# Load the data
v <- read.csv("andre_estimates_21_02.txt", sep  = "\t") %>%
rowSums()
y <- data.frame(value = v) %>%
mutate(time = seq(7, by = 7, length.out = n())) %>%
dplyr::select(time, value)
ncores <- 8
minParticles <- max(ncores, 16)
model_str <- "
model dureau {
obs y
state S
state E
state I
state R
state x
state Z
input N
param k
param gamma
param sigma // Noise driver
param E0
param I0
param R0
param x0
param tau
sub parameter {
k ~ truncated_gaussian(1.59, 0.02, lower = 0) // k is the period here, not the rate, i.e. 1/k is the rate
gamma ~ truncated_gaussian(1.08, 0.075, lower = 0) // gamma is the period, not the rate
sigma ~ uniform(0,1)
x0 ~ uniform(-5,2)
I0 ~ uniform(-16, -9)
E0 ~ uniform(-16, -9)
R0 ~ truncated_gaussian(0.15, 0.15, lower = 0, upper = 1)
tau ~ uniform(0, 1)
}
sub initial {
S <- N
R <- R0*S
S <- S - R
E <- exp(E0 + log(S))
S <- S - E
I <- exp(I0 + log(S))
S <- S - I
x <- x0
Z <- 0
}
sub transition(delta = 1) {
Z <- ((t_now) % 7 == 0 ? 0 : Z)
noise e
e ~ wiener()
ode(alg = 'RK4(3)', h = 1.0, atoler = 1.0e-3, rtoler = 1.0e-8) {
dx/dt = sigma*e
dS/dt = -exp(x)*S*I/N
dE/dt = exp(x)*S*I/N - E/k
dI/dt = E/k-I/gamma
dR/dt = I/gamma
dZ/dt = E/k
}
}
sub observation {
y ~ log_normal(log(max(Z/10.0, 0)), tau)
}
sub proposal_parameter {
k ~ gaussian(k, 0.005)
sigma ~ gaussian(sigma, 0.01)
gamma ~ gaussian(gamma, 0.01)
x0 ~ gaussian(x0, 0.05)
E0 ~ gaussian(E0, 0.05)
I0 ~ gaussian(I0, 0.05)
R0 ~ gaussian(R0, 0.05)
tau ~ gaussian(tau, 0.05)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
input_lst <- list(N = 52196381)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
bi <- sample(bi_model, end_time = end_time, input = input_lst, obs = obs_lst, nsamples = 1000, nparticles = minParticles, nthreads = ncores, proposal = 'prior') %>%
adapt_particles(min = minParticles, max = minParticles*200) %>%
adapt_proposal(min = 0.05, max = 0.4) %>%
sample(nsamples = 5000, thin = 5) %>% # burn in
sample(nsamples = 5000, thin = 5)
install.packages('libbib')
library(libbib)
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
input_lst <- list(N = 52196381)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
bi <- sample(bi_model, end_time = end_time, input = input_lst, obs = obs_lst, nsamples = 1000, nparticles = minParticles, nthreads = ncores, proposal = 'prior') %>%
adapt_particles(min = minParticles, max = minParticles*200) %>%
adapt_proposal(min = 0.05, max = 0.4) %>%
sample(nsamples = 5000, thin = 5) %>% # burn in
sample(nsamples = 5000, thin = 5)
library(libbib)
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
input_lst <- list(N = 52196381)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
bi <- sample(bi_model, end_time = end_time, input = input_lst, obs = obs_lst, nsamples = 1000, nparticles = minParticles, nthreads = ncores, proposal = 'prior') %>%
adapt_particles(min = minParticles, max = minParticles*200) %>%
adapt_proposal(min = 0.05, max = 0.4) %>%
sample(nsamples = 5000, thin = 5) %>% # burn in
sample(nsamples = 5000, thin = 5)
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
input_lst <- list(N = 52196381)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
bi <- sample(bi_model, end_time = end_time, input = input_lst, obs = obs_lst, nsamples = 1000, nparticles = minParticles, nthreads = ncores, proposal = 'prior') %>%
adapt_particles(min = minParticles, max = minParticles*200) %>%
adapt_proposal(min = 0.05, max = 0.4) %>%
sample(nsamples = 5000, thin = 5) %>% # burn in
sample(nsamples = 5000, thin = 5)
bi_lst <- bi_read(bi %>% sample_obs)
fitY <- bi_lst$y %>%
group_by(time) %>%
mutate(
q025 = quantile(value, 0.025),
q25 = quantile(value, 0.25),
q50 = quantile(value, 0.5),
q75 = quantile(value, 0.75),
q975 = quantile(value, 0.975)
) %>% ungroup() %>%
left_join(y %>% rename(Y = value))
g1 <- ggplot(data = fitY) +
geom_ribbon(aes(x = time, ymin = q25, ymax = q75), alpha = 0.3) +
geom_ribbon(aes(x = time, ymin = q025, ymax = q975), alpha = 0.3) +
geom_line(aes(x = time, y = q50)) +
geom_point(aes(x = time, y = Y), colour = "Red") +
ylab("Incidence") +
xlab("Time")
plot_df <- bi_lst$x %>% mutate(value = exp(value)) %>%
group_by(time) %>%
mutate(
q025 = quantile(value, 0.025),
q25 = quantile(value, 0.25),
q50 = quantile(value, 0.5),
q75 = quantile(value, 0.75),
q975 = quantile(value, 0.975)
) %>% ungroup()
g2 <- ggplot(data = plot_df) +
geom_ribbon(aes(x = time, ymin = q25, ymax = q75), alpha = 0.3) +
geom_ribbon(aes(x = time, ymin = q025, ymax = q975), alpha = 0.3) +
geom_line(aes(x = time, y = q50)) +
ylab(TeX("Transmissibility ($\\beta(t)$)")) +
xlab("Time")
plot_df <- bi_lst$x %>% mutate(value = exp(value)) %>%
group_by(np) %>% mutate(value = value - value[1]) %>%
group_by(time) %>%
mutate(
q025 = quantile(value, 0.025),
q25 = quantile(value, 0.25),
q50 = quantile(value, 0.5),
q75 = quantile(value, 0.75),
q975 = quantile(value, 0.975)
) %>% ungroup()
g3 <- ggplot(data = plot_df) +
geom_ribbon(aes(x = time, ymin = q25, ymax = q75), alpha = 0.3) +
geom_ribbon(aes(x = time, ymin = q025, ymax = q975), alpha = 0.3) +
geom_line(aes(x = time, y = q50)) +
ylab(TeX("Relative trans. ($\\beta(t)-\\beta(0)$)")) +
xlab("Time")
ggarrange(g1, g2, g3, ncol = 1, nrow = 3, align = "v")
View(bi_lst)
View(y)
k=c(1,2,3,,4,5,6,7,8)
k=matrix(c(1,2,3,4,5,6,7,8),4)
k
k %>% rowsum()
k %>% rowSums()
seq(7, by = 7, length.out = n())
seq(7,by=7)
View(bi_lst)
bi_lst[["k"]][["value"]]
y
v
View(bi_lst)
bi_lst[["sigma"]][["value"]]
fitY
plot(bi_lst$k,type="l",xlab="iteration",ylab="k")
bi_lst[["k"]][["value"]]
plot(bi_lst$gamma,type="l",xlab="iteration",ylab="gamma")
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(pander)
library(lubridate)
library(latex2exp)
knitr::opts_chunk$set(cache = T, echo = F, message = F, warning = F, dpi = 300)
theme_set(theme_bw())
# Appropiate colours for colourblind
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#999999")
scale_colour_discrete <- function(...)
scale_colour_manual(..., values = cbPalette)
scale_fill_discrete <- function(...)
scale_fill_manual(..., values = cbPalette)
library(rbi)
library(rbi.helpers)
# Load the data
v <- read.csv("andre_estimates_21_02.txt", sep  = "\t") %>%
rowSums()
y <- data.frame(value = v) %>%
mutate(time = seq(7, by = 7, length.out = n())) %>%
dplyr::select(time, value)
ncores <- 8
minParticles <- max(ncores, 16)
model_str <- "
model molly {
obs y
state S
state E_A
state I
state R
state x
input N
param alpha
param gamma
param sigma // Noise driver
param E_A0
param I0
param R0
param x0
sub parameter {
alpha ~ log_gaussian(1.83,0.53) // k is the average onset symptoms period here, not the rate, i.e. 1/alpha is the rate
gamma ~ truncated_gaussian(1.08, 0.075, lower = 0) // gamma is the average recovery period, not the rate. i.e.1/gamma is the rate
sigma ~ uniform(0,1)
x0 ~ uniform(-5,2)
I0 ~ uniform(0, 5)
E_A0 ~ uniform(0, 5)
R0 ~ truncated_gaussian(0.15, 0.15, lower = 0, upper = 1) //could be 0
}
sub initial {
S <- N
R <- 0
S <- S - R
E_A <- exp(E_A0 + log(S))
S <- S - E_A
I <- exp(I0 + log(S))
S <- S - I
x <- x0
}
sub transition(delta = 1) {
noise e
e ~ wiener()
ode(alg = 'RK4(3)', h = 1.0, atoler = 1.0e-3, rtoler = 1.0e-8) {
dx/dt = sigma*e
dS/dt = -exp(x)*((E_A)+0.1*I)*S/N
dE_A/dt = -exp(x)*((E_A)+0.1*I)*S/N - E_A/alpha
dI/dt = E_A/alpha-I*(1/gamma+0.004)
dR/dt = (I+E_A)/gamma
}
}
sub observation {
y ~ poisson(rate=E_A/alpha )
}
sub proposal_parameter {
alpha ~ gaussian(alpha, 0.005)
sigma ~ gaussian(sigma, 0.01)
gamma ~ gaussian(gamma, 0.01)
x0 ~ gaussian(x0, 0.05)
E_A0 ~ gaussian(E_A0, 0.05)
I0 ~ gaussian(I0, 0.05)
R0 ~ gaussian(R0, 0.05)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
input_lst <- list(N = 52196381)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
bi <- sample(bi_model, end_time = end_time, input = input_lst, obs = obs_lst, nsamples = 1000, nparticles = minParticles, nthreads = ncores, proposal = 'prior') %>%
adapt_particles(min = minParticles, max = minParticles*200) %>%
adapt_proposal(min = 0.05, max = 0.4) %>%
sample(nsamples = 5000, thin = 5) %>% # burn in
sample(nsamples = 5000, thin = 5)
bi_lst <- bi_read(bi %>% sample_obs)
model_str <- "
model molly {
obs y
state S
state E
state I
state R
state x
input N
param alpha
param gamma
param sigma // Noise driver
param E0
param I0
param R0
param x0
sub parameter {
alpha ~ log_gaussian(1.83,0.53) // k is the average onset symptoms period here, not the rate, i.e. 1/alpha is the rate
gamma ~ truncated_gaussian(1.08, 0.075, lower = 0) // gamma is the average recovery period, not the rate. i.e.1/gamma is the rate
sigma ~ uniform(0,1)
x0 ~ uniform(-5,2)
I0 ~ uniform(0, 5)
E0 ~ uniform(0, 5)
R0 ~ truncated_gaussian(0.15, 0.15, lower = 0, upper = 1) //could be 0
}
sub initial {
S <- N
R <- R0*S
S <- S - R
E <- exp(E0 + log(S))
S <- S - E
I <- exp(I0 + log(S))
S <- S - I
x <- x0
}
sub transition(delta = 1) {
noise e
e ~ wiener()
ode(alg = 'RK4(3)', h = 1.0, atoler = 1.0e-3, rtoler = 1.0e-8) {
dx/dt = sigma*e
dS/dt = -exp(x)*(E+0.1*I)*S/N
dE_A/dt = -exp(x)*(E+0.1*I)*S/N - E/alpha
dI/dt = E/alpha-I*(1/gamma+0.004)
dR/dt = (I+E)/gamma
}
}
sub observation {
y ~ poisson(rate=E/alpha )
}
sub proposal_parameter {
alpha ~ gaussian(alpha, 0.005)
sigma ~ gaussian(sigma, 0.01)
gamma ~ gaussian(gamma, 0.01)
x0 ~ gaussian(x0, 0.05)
E0 ~ gaussian(E0, 0.05)
I0 ~ gaussian(I0, 0.05)
R0 ~ gaussian(R0, 0.05)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
input_lst <- list(N = 52196381)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
bi <- sample(bi_model, end_time = end_time, input = input_lst, obs = obs_lst, nsamples = 1000, nparticles = minParticles, nthreads = ncores, proposal = 'prior') %>%
adapt_particles(min = minParticles, max = minParticles*200) %>%
adapt_proposal(min = 0.05, max = 0.4) %>%
sample(nsamples = 5000, thin = 5) %>% # burn in
sample(nsamples = 5000, thin = 5)
model_str <- "
model molly {
obs y
state S
state E
state I
state R
state x
input N
param alpha
param gamma
param sigma // Noise driver
param E0
param I0
param R0
param x0
sub parameter {
alpha ~ log_gaussian(1.83,0.53) // k is the average onset symptoms period here, not the rate, i.e. 1/alpha is the rate
gamma ~ truncated_gaussian(1.08, 0.075, lower = 0) // gamma is the average recovery period, not the rate. i.e.1/gamma is the rate
sigma ~ uniform(0,1)
x0 ~ uniform(-5,2)
I0 ~ uniform(0, 5)
E0 ~ uniform(0, 5)
R0 ~ truncated_gaussian(0.15, 0.15, lower = 0, upper = 1) //could be 0
}
sub initial {
S <- N
R <- R0*S
S <- S - R
E <- exp(E0 + log(S))
S <- S - E
I <- exp(I0 + log(S))
S <- S - I
x <- x0
}
sub transition(delta = 1) {
noise e
e ~ wiener()
ode(alg = 'RK4(3)', h = 1.0, atoler = 1.0e-3, rtoler = 1.0e-8) {
dx/dt = sigma*e
dS/dt = -exp(x)*(E+0.1*I)*S/N
dE/dt = -exp(x)*(E+0.1*I)*S/N - E/alpha
dI/dt = E/alpha-I*(1/gamma+0.004)
dR/dt = (I+E)/gamma
}
}
sub observation {
y ~ poisson(rate=E/alpha )
}
sub proposal_parameter {
alpha ~ gaussian(alpha, 0.005)
sigma ~ gaussian(sigma, 0.01)
gamma ~ gaussian(gamma, 0.01)
x0 ~ gaussian(x0, 0.05)
E0 ~ gaussian(E0, 0.05)
I0 ~ gaussian(I0, 0.05)
R0 ~ gaussian(R0, 0.05)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
input_lst <- list(N = 52196381)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
bi <- sample(bi_model, end_time = end_time, input = input_lst, obs = obs_lst, nsamples = 1000, nparticles = minParticles, nthreads = ncores, proposal = 'prior') %>%
adapt_particles(min = minParticles, max = minParticles*200) %>%
adapt_proposal(min = 0.05, max = 0.4) %>%
sample(nsamples = 5000, thin = 5) %>% # burn in
sample(nsamples = 5000, thin = 5)
