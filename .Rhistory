library(rbi)
library(rbi.helpers)
# Load the data
v <- read.csv("forecast1_y1w.csv", header=FALSE, stringsAsFactors=FALSE) %>%
rowSums()
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(pander)
library(lubridate)
library(latex2exp)
library(rbi)
library(rbi.helpers)
# Load the data
v <- read.csv("forecast1_y1w.csv", header=FALSE, stringsAsFactors=FALSE) %>%
rowSums()
y <- data.frame(value = v) %>%
mutate(time = seq(7, by = 7, length.out = n())) %>%
dplyr::select(time, value)
L <- read.csv("Forcing42.csv", header=FALSE, stringsAsFactors=FALSE)
Forcing <- data.frame(value = L) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time,V1 )
colnames(Forcing) <- c("time","value")
ncores <- 12
minParticles <- max(ncores, 16)
model_str <- "
model dureau {
obs y
state S
state E
state I
state R
state mu
state x
state Z
input N
input Forcing
param k
param gamma
param sigma // Noise driver
param theta
param a
param b
param tau
sub parameter {
k ~ truncated_gaussian(5, 1, lower = 0) // k is the period here, not the rate, i.e. 1/k is the rate
gamma ~ truncated_gaussian(9, 1, lower = 0) // gamma is the period, not the rate
sigma ~ truncated_gaussian(sqrt(0.004), 0.1, lower = 0)
theta ~ truncated_gaussian(0.05, 0.1, lower = 0)
tau ~ truncated_gaussian(0.1, 0.05, lower = 0)
a ~ truncated_gaussian(-0.02, 0.05, upper = 0)
b ~ truncated_gaussian(-0.2, 0.1, upper = 0)
}
sub initial {
x ~ gaussian(-0.02, 0.2)
S <- N-1
E <- 1
I <- 0
R <- 0
Z <- 1/k
}
sub transition(delta = 1) {
Z <- ((t_now) % 7 == 0 ? 0 : Z)
noise e
e ~ wiener()
mu <- a+b*Forcing
ode(alg = 'RK4(3)', h = 1.0, atoler = 1.0e-3, rtoler = 1.0e-8) {
dx/dt = theta*(mu-x)+sigma*e
dS/dt = -exp(x)*S*(0.1*I+E)/N
dE/dt = exp(x)*S*(0.1*I+E)/N - E*(1/k+1/gamma)
dI/dt = E/k-I*(1/gamma+0.0087)
dR/dt = (I+E)/gamma+0.0087*I
dZ/dt = E/k
}
}
sub observation {
y ~ log_normal(log(max(Z/5, 0)), tau)
}
sub proposal_parameter {
k ~ truncated_gaussian(k, 0.01, lower = 0)
gamma ~ truncated_gaussian(gamma, 0.01, lower = 0)
sigma ~ truncated_gaussian(sigma, 0.001, lower = 0)
theta ~ truncated_gaussian(theta, 0.001, lower = 0)
tau ~ gaussian(tau, 0.001)
a ~ gaussian(a, 0.001)
b ~ gaussian(b, 0.001)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
input_lst <- list(N = 52196381,Forcing=Forcing)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
init_list <- list(k=5, gamma=9, sigma=sqrt(0.004),theta=0.05,tau=0.1,a=-0.02,b=-0.2)
#LibBi wrapper
#run launches LibBi with a particular set of command line arguments
bi_model <- libbi(model,end_time = end_time, input = input_lst,
init=init_list, obs = obs_lst)
#RBi.helpers adapt_particle
particles_adapted <- bi_model %>%
sample(nsamples = 2000, nparticles = minParticles,
nthreads = ncores, proposal = 'prior',seed=0066661) %>%
adapt_particles(min = minParticles, max = minParticles*500)
#RBi.helpers adapt_proposal
proposal_adapted <- particles_adapted %>%
sample(target = "posterior", nsamples = 2000,
nthreads = ncores, proposal = 'model',seed=0066661) %>%
adapt_proposal(min = 0.1, max = 0.4)
#Running pMCMC with burn-in
bi <- proposal_adapted %>%
sample(nsamples = 1000, thin = 1, init=init_list)
bi_contents(bi)
posterior <- bi_read(bi)
View(posterior)
str(posterior)
summary(bi)
summary(bi, type = "state")
library("coda")
traces <- mcmc(get_traces(bi))
traces
plot(traces)
plot(traces)
plot(traces)
plot(traces)
pred_bi <- predict(
bi, start_time = 0, end_time = 20 * 7, output_every = 7,
with = c("transform-obs-to-state")
)
View(pred_bi)
obs_bi <- sample_obs(bi)
View(obs_bi)
summary(obs_bi, type = "obs")
ps <- summary(pred_bi, type = "obs")
View(ps)
ggplot(ps, aes(x = time)) +
geom_line(aes(y = Median)) +
geom_ribbon(aes(ymin = `1st Qu.`, ymax = `3rd Qu.`), alpha = 0.5) +
geom_point(aes(y = value), dataset$Incidence, color = "darkred") +
ylab("cases")
rr<-fread('real_Y_days.csv')
library(data.table)
rr<-fread('real_Y_days.csv')
names(rr)<-'value'
rr[,time:=1:.N]
rr <- rr[43:182,]
ggplot(ps, aes(x = time)) +
geom_line(aes(y = Median)) +
geom_ribbon(aes(ymin = `1st Qu.`, ymax = `3rd Qu.`), alpha = 0.5) +
geom_point(aes(y = value), rr, color = "darkred") +
ylab("cases")
View(rr)
ggplot(ps, aes(x = time)) +
geom_line(aes(y = Median)) +
geom_ribbon(aes(ymin = `1st Qu.`, ymax = `3rd Qu.`), alpha = 0.5) +
# geom_point(aes(y = value), rr, color = "darkred") +
ylab("cases")
ggplot(ps, aes(x = time)) +
geom_line(aes(y = Median)) +
geom_ribbon(aes(ymin = `1st Qu.`, ymax = `3rd Qu.`), alpha = 0.5) +
ylab("cases")
ggplot(ps, aes(x = time)) +
geom_line(aes(y = Median))
library("ggplot2")
ggplot(ps, aes(x = time)) +
geom_line(aes(y = Median)) +
geom_ribbon(aes(ymin = `1st Qu.`, ymax = `3rd Qu.`), alpha = 0.5) +
ylab("cases")
View(ps)
dev.off()
library("ggplot2")
ggplot(ps, aes(x = time)) +
geom_line(aes(y = Median)) +
geom_ribbon(aes(ymin = `1st Qu.`, ymax = `3rd Qu.`), alpha = 0.5) +
ylab("cases")
ggplot(ps, aes(x = time)) +
geom_line(aes(y = Median)) +
geom_ribbon(aes(ymin = `1st Qu.`, ymax = `3rd Qu.`), alpha = 0.5) +
geom_point(aes(y = value), rr, color = "darkred") +
ylab("cases")
View(rr)
rr<-fread('real_Y_days.csv')
names(rr)<-'value'
# rr[,time:=1:.N]
rr <- rr[43:182,]
View(rr)
ggplot(ps, aes(x = time)) +
geom_line(aes(y = Median)) +
geom_ribbon(aes(ymin = `1st Qu.`, ymax = `3rd Qu.`), alpha = 0.5) +
geom_point(aes(y = value), rr, color = "darkred") +
ylab("cases")
ggplot(ps, aes(x = time)) +
geom_line(aes(y = Median)) +
geom_ribbon(aes(ymin = `1st Qu.`, ymax = `3rd Qu.`), alpha = 0.5) +
geom_point(aes(y = value), rr, inherit.aes=F,color = "darkred") +
ylab("cases")
ggplot(ps, aes(x = time)) +
geom_line(aes(y = Median)) +
geom_ribbon(aes(ymin = `1st Qu.`, ymax = `3rd Qu.`), alpha = 0.5) +
# geom_point(aes(y = value), rr, inherit.aes=F,color = "darkred") +
ylab("cases")
View(ps)
rr<-fread('real_Y_days.csv')
# names(rr)<-'value'
# rr[,time:=1:.N]
rr <- rr[43:182,]
rr <- data.frame(value = rr) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time, value)
rr<-fread('real_Y_days.csv')
# names(rr)<-'value'
# rr[,time:=1:.N]
rr <- rr[43:182,]
rr <- data.frame(value = rr) %>%
mutate(time = seq(1, by = 1, length.out = n()))
View(rr)
rr<-fread('real_Y_days.csv')
# names(rr)<-'value'
# rr[,time:=1:.N]
rr <- rr[43:182,]
rr <- data.frame(value = rr) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time, V1)
View(rr)
rr<-fread('real_Y_days.csv')
# names(rr)<-'value'
# rr[,time:=1:.N]
rr <- rr[43:182,]
rr <- data.frame(value = rr) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time, V1)
colnames(rr) <- c("time","value")
View(rr)
ggplot(ps, aes(x = time)) +
geom_line(aes(y = Median)) +
geom_ribbon(aes(ymin = `1st Qu.`, ymax = `3rd Qu.`), alpha = 0.5) +
geom_point(aes(y = value), rr, inherit.aes=F,color = "darkred") +
ylab("cases")
ggplot(ps, aes(x = time)) +
geom_line(aes(y = Median)) +
geom_ribbon(aes(ymin = `1st Qu.`, ymax = `3rd Qu.`), alpha = 0.5) +
geom_point(aes(x=time, y = value), rr, inherit.aes=F,color = "darkred") +
ylab("cases")
View(rr)
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(pander)
library(lubridate)
library(latex2exp)
library(rbi)
library(rbi.helpers)
# Load the data
# v <- read.csv("forecast1_y1w.csv", header=FALSE, stringsAsFactors=FALSE) %>%
#   rowSums()
#
# y <- data.frame(value = v) %>%
#   mutate(time = seq(7, by = 7, length.out = n())) %>%
#   dplyr::select(time, value)
L <- read.csv("Forcing42.csv", header=FALSE, stringsAsFactors=FALSE)
Forcing <- data.frame(value = L) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time,V1 )
colnames(Forcing) <- c("time","value")
ncores <- 12
minParticles <- max(ncores, 16)
model_str <- "
model dureau {
obs y
state S
state E
state I
state R
state mu
state x
state Z
input N
input Forcing
param k
param gamma
param sigma // Noise driver
param theta
param a
param b
param tau
sub parameter {
k ~ truncated_gaussian(5, 1, lower = 0) // k is the period here, not the rate, i.e. 1/k is the rate
gamma ~ truncated_gaussian(9, 1, lower = 0) // gamma is the period, not the rate
sigma ~ truncated_gaussian(sqrt(0.004), 0.1, lower = 0)
theta ~ truncated_gaussian(0.05, 0.1, lower = 0)
tau ~ truncated_gaussian(0.1, 0.05, lower = 0)
a ~ truncated_gaussian(-0.02, 0.05, upper = 0)
b ~ truncated_gaussian(-0.2, 0.1, upper = 0)
}
sub initial {
x ~ gaussian(-0.02, 0.2)
S <- N-1
E <- 1
I <- 0
R <- 0
Z <- 1/k
}
sub transition(delta = 1) {
Z <- ((t_now) % 7 == 0 ? 0 : Z)
noise e
e ~ wiener()
mu <- a+b*Forcing
ode(alg = 'RK4(3)', h = 1.0, atoler = 1.0e-3, rtoler = 1.0e-8) {
dx/dt = theta*(mu-x)+sigma*e
dS/dt = -exp(x)*S*(0.1*I+E)/N
dE/dt = exp(x)*S*(0.1*I+E)/N - E*(1/k+1/gamma)
dI/dt = E/k-I*(1/gamma+0.0087)
dR/dt = (I+E)/gamma+0.0087*I
dZ/dt = E/k
}
}
sub observation {
y ~ log_normal(log(max(Z/5, 0)), tau)
}
sub proposal_parameter {
k ~ truncated_gaussian(k, 0.01, lower = 0)
gamma ~ truncated_gaussian(gamma, 0.01, lower = 0)
sigma ~ truncated_gaussian(sigma, 0.001, lower = 0)
theta ~ truncated_gaussian(theta, 0.001, lower = 0)
tau ~ gaussian(tau, 0.001)
a ~ gaussian(a, 0.001)
b ~ gaussian(b, 0.001)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
input_lst <- list(N = 52196381,Forcing=Forcing)
init_list <- list(k=5, gamma=9, sigma=sqrt(0.004),theta=0.05,tau=0.1,a=-0.02,b=-0.2)
#Generate obs data directly within LibBi
set.seed(1001)
covid_data <- generate_dataset(model, end_time = 52 * 7, noutputs = 52,input = input_lst)
covid_data
dataset <- bi_read(covid_data)
View(dataset)
names(dataset)
View(dataset)
bi_model <- libbi(model, obs = covid_data)
particles_adapted <- bi_model %>%
sample(nsamples = 2000, nparticles = minParticles,
nthreads = ncores, proposal = 'prior',seed=0066661) %>%
adapt_particles(min = minParticles, max = minParticles*500)
#RBi.helpers adapt_proposal
proposal_adapted <- particles_adapted %>%
sample(target = "posterior", nsamples = 2000,
nthreads = ncores, proposal = 'model',seed=0066661) %>%
adapt_proposal(min = 0.1, max = 0.4)
#Running pMCMC with burn-in
bi <- proposal_adapted %>%
sample(nsamples = 1000, thin = 1, init=init_list)
pred_bi <- predict(
bi, start_time = 0, end_time = 53 * 7, output_every = 7,
with = c("transform-obs-to-state")
)
ps <- summary(pred_bi, type = "obs")
View(ps)
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(pander)
library(lubridate)
library(latex2exp)
library(rbi)
library(rbi.helpers)
Load the data
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(pander)
library(lubridate)
library(latex2exp)
library(rbi)
library(rbi.helpers)
# Load the data
v <- read.csv("forecast1_y1w.csv", header=FALSE, stringsAsFactors=FALSE) %>%
rowSums()
y <- data.frame(value = v) %>%
mutate(time = seq(7, by = 7, length.out = n())) %>%
dplyr::select(time, value)
L <- read.csv("Forcing42.csv", header=FALSE, stringsAsFactors=FALSE)
Forcing <- data.frame(value = L) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time,V1 )
colnames(Forcing) <- c("time","value")
ncores <- 12
minParticles <- max(ncores, 16)
model_str <- "
model dureau {
obs y
state S
state E
state I
state R
state mu
state x
state Z
input N
input Forcing
param k
param gamma
param sigma // Noise driver
param theta
param a
param b
param tau
sub parameter {
k ~ truncated_gaussian(5, 1, lower = 0) // k is the period here, not the rate, i.e. 1/k is the rate
gamma ~ truncated_gaussian(9, 1, lower = 0) // gamma is the period, not the rate
sigma ~ truncated_gaussian(sqrt(0.004), 0.1, lower = 0)
theta ~ truncated_gaussian(0.05, 0.1, lower = 0)
tau ~ truncated_gaussian(0.1, 0.05, lower = 0)
a ~ truncated_gaussian(-0.02, 0.05, upper = 0)
b ~ truncated_gaussian(-0.2, 0.1, upper = 0)
}
sub initial {
x ~ gaussian(-0.02, 0.2)
S <- N-1
E <- 1
I <- 0
R <- 0
Z <- 1/k
}
sub transition(delta = 1) {
Z <- ((t_now) % 7 == 0 ? 0 : Z)
noise e
e ~ wiener()
mu <- a+b*Forcing
ode(alg = 'RK4(3)', h = 1.0, atoler = 1.0e-3, rtoler = 1.0e-8) {
dx/dt = theta*(mu-x)+sigma*e
dS/dt = -exp(x)*S*(0.1*I+E)/N
dE/dt = exp(x)*S*(0.1*I+E)/N - E*(1/k+1/gamma)
dI/dt = E/k-I*(1/gamma+0.0087)
dR/dt = (I+E)/gamma+0.0087*I
dZ/dt = E/k
}
}
sub observation {
y ~ log_normal(log(max(Z/5, 0)), tau)
}
sub proposal_parameter {
k ~ truncated_gaussian(k, 0.01, lower = 0)
gamma ~ truncated_gaussian(gamma, 0.01, lower = 0)
sigma ~ truncated_gaussian(sigma, 0.001, lower = 0)
theta ~ truncated_gaussian(theta, 0.001, lower = 0)
tau ~ gaussian(tau, 0.001)
a ~ gaussian(a, 0.001)
b ~ gaussian(b, 0.001)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
input_lst <- list(N = 52196381,Forcing=Forcing)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
init_list <- list(k=5, gamma=9, sigma=sqrt(0.004),theta=0.05,tau=0.1,a=-0.02,b=-0.2)
#LibBi wrapper
#run launches LibBi with a particular set of command line arguments
bi_model <- libbi(model,end_time = end_time, input = input_lst,
init=init_list, obs = obs_lst)
#RBi.helpers adapt_particle
particles_adapted <- bi_model %>%
sample(nsamples = 2000, nparticles = minParticles,
nthreads = ncores, proposal = 'prior',seed=0066661) %>%
adapt_particles(min = minParticles, max = minParticles*500)
#RBi.helpers adapt_proposal
proposal_adapted <- particles_adapted %>%
sample(target = "posterior", nsamples = 2000,
nthreads = ncores, proposal = 'model',seed=0066661) %>%
adapt_proposal(min = 0.1, max = 0.4)
#Running pMCMC with burn-in
bi <- proposal_adapted %>%
sample(nsamples = 1000, thin = 1, init=init_list)
pred_bi <- predict(
bi, start_time = 6*7, end_time = 18 * 7, output_every = 7,
with = c("transform-obs-to-state")
)
ps <- summary(pred_bi, type = "obs")
library(data.table)
rr<-fread('real_Y_days.csv')
# names(rr)<-'value'
# rr[,time:=1:.N]
rr <- rr[43:126,]
rr <- data.frame(value = rr) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time, V1)
colnames(rr) <- c("time","value")
ggplot(ps, aes(x = time)) +
geom_line(aes(y = Median)) +
geom_ribbon(aes(ymin = `1st Qu.`, ymax = `3rd Qu.`), alpha = 0.5) +
geom_point(aes(x=time, y = value), rr, inherit.aes=F,color = "darkred") +
ylab("cases")
View(ps)
library(data.table)
rr<-fread('real_Y_days.csv')
# names(rr)<-'value'
# rr[,time:=1:.N]
rr <- rr[1:126,]
rr <- data.frame(value = rr) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time, V1)
colnames(rr) <- c("time","value")
ggplot(ps, aes(x = time)) +
geom_line(aes(y = Median)) +
geom_ribbon(aes(ymin = `1st Qu.`, ymax = `3rd Qu.`), alpha = 0.5) +
geom_point(aes(x=time, y = value), rr, inherit.aes=F,color = "darkred") +
ylab("cases")
View(ps)
