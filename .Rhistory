lines(G2,col='blue') #beta
lines(G3)
g2=rtruncnorm(1000,a=0, b=Inf, mean = 0.5, sd = 0.3)
G2<-density(g2)
g3<- rtruncnorm(1000,a=0, b=Inf, mean = 0.001, sd = 0.25)
G3<-density(g3)
plot(G,type='l',ylim=c(0,8),xlim=c(0,2))
lines(G1,col='red') #
lines(G2,col='blue') #beta
lines(G3)
require(deSolve)
SEIR <- function(time, current_state, params){
with(as.list(c(current_state, params)),{
N <- S+E+I+R
dS <- -(beta*S*I)/N
dE <- (beta*S*I)/N - sigma*E
dI <- sigma*E - gamma*I - mu*I
dR <- gamma*I
dM <- mu*I
return(list(c(dS, dE, dI, dR, dM)))
})
}
params <- c(beta=0.5, sigma=0.25, gamma=0.2, mu=0.001)
initial_state <- c(S=999999, E=1, I=0, R=0, M=0)
times <- 0:365
model <- ode(initial_state, times, SEIR, params)
summary(model)
matplot(model, type="l", lty=1, main="SEIR model", xlab="Time")
legend <- colnames(model)[2:6]
legend("right", legend=legend, col=2:6, lty = 1)
Z <-as.vector(model[,3])
Z <-0.2*Z
Z <-0.2*model[,3]
write.csv(Z,"simZ1.csv")
Z <- read.csv("simz_1.csv", header=FALSE, stringsAsFactors=FALSE)
Z <- data.frame(Z)
tau <- runif(1,0,1)
Y <-vector(length = 366)
for (i in 1:366){
Y[i]<- rlnorm(1,log(Z[i,]/5),tau)
}
write.csv(Y,"simY1.csv")
v <- read.csv("simulate366.csv", header=FALSE, stringsAsFactors=FALSE)
View(v)
y <- data.frame(value = v) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time, value)
View(y)
View(v)
rm(list=ls())
v <- read.csv("simulate366.csv", header=FALSE, stringsAsFactors=FALSE)
y <- data.frame(value = v) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time, value)
y <- data.frame(value = v)
y <- data.frame(value = v) %>%
mutate(time = seq(1, by = 1, length.out = n()))
View(y)
y <- data.frame(value = v) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time, v)
v <- read.csv("simulate366.csv", header=FALSE, stringsAsFactors=FALSE)
y <- data.frame(value = v) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time, value)
v <- read.csv("simulate366.csv", header=FALSE, stringsAsFactors=FALSE)
y <- data.frame(value = v) %>%
mutate(time = seq(1, by = 1, length.out = n()))
View(y)
v <- read.csv("simulate366.csv", header=FALSE, stringsAsFactors=FALSE)
y <- data.frame(value = v) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time, V1)
View(y)
colnames(y) <- c("time", "value")
Z <-as.vector(model[,3])
write.csv(Z,"simZ1.csv")
write.csv(Z,"simZ1.csv")
require(deSolve)
SEIR <- function(time, current_state, params){
with(as.list(c(current_state, params)),{
N <- S+E+I+R
dS <- -(beta*S*I)/N
dE <- (beta*S*I)/N - sigma*E
dI <- sigma*E - gamma*I - mu*I
dR <- gamma*I
dM <- mu*I
return(list(c(dS, dE, dI, dR, dM)))
})
}
params <- c(beta=0.5, sigma=0.25, gamma=0.2, mu=0.001)
initial_state <- c(S=999999, E=1, I=0, R=0, M=0)
times <- 0:365
model <- ode(initial_state, times, SEIR, params)
summary(model)
matplot(model, type="l", lty=1, main="SEIR model", xlab="Time")
legend <- colnames(model)[2:6]
legend("right", legend=legend, col=2:6, lty = 1)
Z <-as.vector(model[,3])
Z <-0.2*Z
Z <-0.2*model[,3]
write.csv(Z,"simZ1.csv")
Z <- read.csv("simz_1.csv", header=FALSE, stringsAsFactors=FALSE)
Z <- data.frame(Z)
fitY <- read.csv("SEIRy.csv", header=TRUE, stringsAsFactors=FALSE)
g1 <- ggplot(data = fitY) +
geom_ribbon(aes(x = time, ymin = q25, ymax = q75), alpha = 0.3) +
geom_ribbon(aes(x = time, ymin = q025, ymax = q975), alpha = 0.3) +
geom_line(aes(x = time, y = q50)) +
geom_point(aes(x = time, y = Y), colour = "Red") +
geom_point(aes(x = time, y = Z), colour = "Blue")
ylab("Daily new confirmed cases") +
xlab("Time-Day")
fitY <- read.csv("SEIRy.csv", header=TRUE, stringsAsFactors=FALSE)
g1 <- ggplot(data = fitY) +
geom_ribbon(aes(x = time, ymin = q25, ymax = q75), alpha = 0.3) +
geom_ribbon(aes(x = time, ymin = q025, ymax = q975), alpha = 0.3) +
geom_line(aes(x = time, y = q50)) +
geom_point(aes(x = time, y = Y), colour = "Red") +
geom_point(aes(x = time, y = Z), colour = "Blue")+
ylab("Daily new confirmed cases") +
xlab("Time-Day")
g1
fitY <- read.csv("SEIRy.csv", header=TRUE, stringsAsFactors=FALSE)
g1 <- ggplot(data = fitY) +
geom_ribbon(aes(x = time, ymin = q25, ymax = q75), alpha = 0.3) +
geom_ribbon(aes(x = time, ymin = q025, ymax = q975), alpha = 0.3) +
geom_line(aes(x = time, y = q50)) +
geom_point(aes(x = time, y = Y), colour = "Red") +
ylab("Daily new confirmed cases") +
xlab("Time-Day")
g1
plot(g1)
lines(Z,type='p')
plot(g1)
lines(Z,type='l')
View(Z)
View(model)
plot(Z)
rm(list=ls())
require(deSolve)
SEIR <- function(time, current_state, params){
with(as.list(c(current_state, params)),{
N <- S+E+I+R
dS <- -(beta*S*I)/N
dE <- (beta*S*I)/N - sigma*E
dI <- sigma*E - gamma*I - mu*I
dR <- gamma*I
dM <- mu*I
return(list(c(dS, dE, dI, dR, dM)))
})
}
params <- c(beta=0.5, sigma=0.25, gamma=0.2, mu=0.001)
initial_state <- c(S=999999, E=1, I=0, R=0, M=0)
times <- 0:365
model <- ode(initial_state, times, SEIR, params)
summary(model)
matplot(model, type="l", lty=1, main="SEIR model", xlab="Time")
legend <- colnames(model)[2:6]
legend("right", legend=legend, col=2:6, lty = 1)
Z <-as.vector(model[,3])
Z <-0.2*Z
Z <-0.2*model[,3]
write.csv(Z,"simZ1.csv")
Z <- read.csv("simz_1.csv", header=FALSE, stringsAsFactors=FALSE)
Z <- data.frame(Z)
tau <- runif(1,0,1)
Y <-vector(length = 366)
for (i in 1:366){
Y[i]<- rlnorm(1,log(Z[i,]/5),tau)
}
write.csv(Y,"simY1.csv")
lines(Z,type='l')
fitY <- read.csv("SEIRy.csv", header=TRUE, stringsAsFactors=FALSE)
g1 <- ggplot(data = fitY) +
geom_ribbon(aes(x = time, ymin = q25, ymax = q75), alpha = 0.3) +
geom_ribbon(aes(x = time, ymin = q025, ymax = q975), alpha = 0.3) +
geom_line(aes(x = time, y = q50)) +
geom_point(aes(x = time, y = Y), colour = "Red") +
ylab("Daily new confirmed cases") +
xlab("Time-Day")
plot(g1)
lines(Z,type='l')
plot(Z)
plot(g1)
lines(Z,type='l')
z
Z
View(Z)
plot(g1)
lines(Z,type='l')
View(Z)
plot(Z)
Z <- read.csv("simz_1.csv", header=FALSE, stringsAsFactors=FALSE)
plot(Z)
View(Z)
View(Z[,1])
plot(Z[,1])
plot(g1)
lines(Z[,1],type='l')
fitY <- read.csv("SEIRy.csv", header=TRUE, stringsAsFactors=FALSE)
g1 <- ggplot(data = fitY) +
geom_ribbon(aes(x = time, ymin = q25, ymax = q75), alpha = 0.3) +
geom_ribbon(aes(x = time, ymin = q025, ymax = q975), alpha = 0.3) +
geom_line(aes(x = time, y = q50)) +
geom_point(aes(x = time, y = Y), colour = "Red") +
ylab("Daily new confirmed cases") +
xlab("Time-Day")
g1
plot(g1)
lines(Z[,1],type='l')
View(fitY)
plot(fitY[,4],type='l',col='red')
lines(Z[,1],type='l')
View(fitY)
fitY[,4]
plot(fitY[,4],type='l',col='red')
tau <- runif(1,0,1)
Y <-vector(length = 366)
for (i in 1:366){
Y[i]<- rlnorm(1,log(Z[i,]/5),tau)
}
write.csv(Y,"simY1.csv")
v <- read.csv("simulate366.csv", header=FALSE, stringsAsFactors=FALSE)
y <- data.frame(value = v) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time, V1)
colnames(y) <- c("time", "value")
plot(y[,2],type='l',col='red')
lines(Z[,1],type='l')
plot(y[,2],type='p',col='red')
lines(Z[,1],type='l')
plot(y[,2],type='p',col='red')
lines(Z[,1]/5,type='l')
fitY <- read.csv("SEIRy.csv", header=TRUE, stringsAsFactors=FALSE)
g1 <- ggplot(data = fitY) +
geom_ribbon(aes(x = time, ymin = q25, ymax = q75), alpha = 0.3) +
geom_ribbon(aes(x = time, ymin = q025, ymax = q975), alpha = 0.3) +
geom_line(aes(x = time, y = q50)) +
geom_point(aes(x = time, y = Y), colour = "Red") +
ylab("Daily new confirmed cases") +
xlab("Time-Day")
g1
plot(y[,2],type='p',col='red')
lines(Z[,1]/5,type='l')
plot(g1)
lines(Z[,1]/5,type='l',col='blue')
plot(g1)
plot(Z[,1]/5,type='l',col='blue')
plot(g1)
lines(Z[,1]/5,type='l',col='blue')
fitY <- read.csv("SEIRy.csv", header=TRUE, stringsAsFactors=FALSE)
g1 <- ggplot(data = fitY) +
geom_ribbon(aes(x = time, ymin = q25, ymax = q75), alpha = 0.3) +
geom_ribbon(aes(x = time, ymin = q025, ymax = q975), alpha = 0.3) +
geom_line(aes(x = time, y = q50)) +
geom_point(aes(x = time, y = Y), colour = "Red") +
geom_point(aes(x = time, y = Z[,1]/5), colour = "Blue") +
ylab("Daily new confirmed cases") +
xlab("Time-Day")
g1
plot(g1)
g1 <- ggplot(data = fitY) +
geom_ribbon(aes(x = time, ymin = q25, ymax = q75), alpha = 0.3) +
geom_ribbon(aes(x = time, ymin = q025, ymax = q975), alpha = 0.3) +
geom_line(aes(x = time, y = q50)) +
geom_point(aes(x = time, y = Y), colour = "Red") +
ylab("Daily new confirmed cases") +
xlab("Time-Day")
View(fitY)
plot(g1)
lines(Z[,1]/5,type='l',col='blue')
plot(g1)
lines(Z[,1]/5,type='l',col='blue')
plot(g1)
lines(Z[,1]/5,type='l',col='red')
View(fitY)
plot(g1)
lines(Z[,1]/5,type='l',col='red')
View(fitY)
g1 <- ggplot(data = fitY) +
geom_ribbon(aes(x = time, ymin = q25, ymax = q75), alpha = 0.3) +
geom_ribbon(aes(x = time, ymin = q025, ymax = q975), alpha = 0.3) +
geom_line(aes(x = time, y = q50)) +
geom_line(aes(x = time, y = Z[,1]/5),colour="Blue") +
geom_point(aes(x = time, y = Y), colour = "Red") +
ylab("Daily new confirmed cases") +
xlab("Time-Day")
g1
g1 <- ggplot(data = fitY) +
geom_ribbon(aes(x = time, ymin = q25, ymax = q75), alpha = 0.3) +
geom_ribbon(aes(x = time, ymin = q025, ymax = q975), alpha = 0.3) +
geom_line(aes(x = time, y = q50)) +
lines(Z[,1]/5,type='l',col='red')+
geom_point(aes(x = time, y = Y), colour = "Red") +
ylab("Daily new confirmed cases") +
xlab("Time-Day")
g1
g1
sigma<-read.csv("SEIRsigma.csv", header=TRUE, stringsAsFactors=FALSE)
gamma<-read.csv("SEIRgamma.csv", header=TRUE, stringsAsFactors=FALSE)
beta<-read.csv("SEIRbeta.csv", header=TRUE, stringsAsFactors=FALSE)
mean(sigma[,2])
par(mfrow=c(3,1))
plot(sigma,type='l',main=TeX("Sampled onset COVID-19 England symptoms rate ($\\sigma$)"),xlab="PMCMC iterations after first 5000 burn-in and thinning by 5",ylab="sigma")
abline(h=0.25, col="red")
abline(h=mean(sigma[,2]),col="blue")
plot(gamma,type='l',main=TeX("Sampled COVID-19 England Recovery rate ($\\gamma$)"),xlab="PMCMC iterations after first 5000 burn-in and thinning by 5",ylab="gamma")
abline(h=0.2, col="red")
abline(h=mean(gamma[,2]),col="blue")
plot(beta,type='l',main=TeX("Sampled COVID-19 England Contact rate ($\\beta$)"),xlab="PMCMC iterations after first 5000 burn-in and thinning by 5",ylab="beta",ylim=c(0.4,0.7))
abline(h=0.5, col="red")
abline(h=mean(beta[,2]),col="blue")
plot(gamma,type='l',main=TeX("Sampled COVID-19 England Recovery rate ($\\gamma$)"),xlab="PMCMC iterations after first 5000 burn-in and thinning by 5",ylab="gamma")
abline(h=0.2, col="red")
abline(h=mean(gamma[,2]),col="blue")
mean(gamma[,2])
plot(gamma,type='l',main=TeX("Sampled COVID-19 England Recovery rate ($\\gamma$)"),xlab="PMCMC iterations after first 5000 burn-in and thinning by 5",ylab="gamma")
abline(h=0.2, col="red")
abline(h=mean(gamma[,2]),col="blue")
par(mfrow=c(3,1))
plot(sigma,type='l',main=TeX("Sampled onset COVID-19 England symptoms rate ($\\sigma$)"),xlab="PMCMC iterations after first 5000 burn-in and thinning by 5",ylab="sigma")
abline(h=0.25, col="red")
abline(h=mean(sigma[,2]),col="blue")
plot(gamma,type='l',main=TeX("Sampled COVID-19 England Recovery rate ($\\gamma$)"),xlab="PMCMC iterations after first 5000 burn-in and thinning by 5",ylab="gamma",ylim=c(min(gamma[,2],max(gamma[,2]))))
par(mfrow=c(3,1))
plot(sigma,type='l',main=TeX("Sampled onset COVID-19 England symptoms rate ($\\sigma$)"),xlab="PMCMC iterations after first 5000 burn-in and thinning by 5",ylab="sigma")
abline(h=0.25, col="red")
abline(h=mean(sigma[,2]),col="blue")
plot(gamma,type='l',main=TeX("Sampled COVID-19 England Recovery rate ($\\gamma$)"),xlab="PMCMC iterations after first 5000 burn-in and thinning by 5",ylab="gamma",ylim=c(min(gamma[,2]),max(gamma[,2])))
abline(h=0.2, col="red")
abline(h=mean(gamma[,2]),col="blue")
plot(beta,type='l',main=TeX("Sampled COVID-19 England Contact rate ($\\beta$)"),xlab="PMCMC iterations after first 5000 burn-in and thinning by 5",ylab="beta")
abline(h=0.5, col="red")
abline(h=mean(beta[,2]),col="blue")
par(mfrow=c(3,1))
plot(sigma,type='l',main=TeX("Sampled onset COVID-19 England symptoms rate ($\\sigma$)"),xlab="PMCMC iterations after first 5000 burn-in and thinning by 5",ylab="sigma")
abline(h=0.25, col="red")
abline(h=mean(sigma[,2]),col="blue")
plot(gamma,type='l',main=TeX("Sampled COVID-19 England Recovery rate ($\\gamma$)"),xlab="PMCMC iterations after first 5000 burn-in and thinning by 5",ylab="gamma",ylim=c(0.18,max(gamma[,2])))
abline(h=0.2, col="red")
abline(h=mean(gamma[,2]),col="blue")
plot(beta,type='l',main=TeX("Sampled COVID-19 England Contact rate ($\\beta$)"),xlab="PMCMC iterations after first 5000 burn-in and thinning by 5",ylab="beta")
abline(h=0.5, col="red")
abline(h=mean(beta[,2]),col="blue")
par(mfrow=c(3,1))
plot(sigma,type='l',main=TeX("Sampled onset COVID-19 England symptoms rate ($\\sigma$)"),xlab="PMCMC iterations after first 5000 burn-in and thinning by 5",ylab="sigma")
abline(h=0.25, col="red")
abline(h=mean(sigma[,2]),col="blue")
plot(gamma,type='l',main=TeX("Sampled COVID-19 England Recovery rate ($\\gamma$)"),xlab="PMCMC iterations after first 5000 burn-in and thinning by 5",ylab="gamma",ylim=c(0.18,max(gamma[,2])))
abline(h=0.2, col="red")
abline(h=mean(gamma[,2]),col="blue")
plot(beta,type='l',main=TeX("Sampled COVID-19 England Contact rate ($\\beta$)"),xlab="PMCMC iterations after first 5000 burn-in and thinning by 5",ylab="beta",ylim=c(0.4,0.6))
abline(h=0.5, col="red")
abline(h=mean(beta[,2]),col="blue")
par(mfrow=c(3,1))
plot(sigma,type='l',main=TeX("Sampled onset COVID-19 England symptoms rate ($\\sigma$)"),xlab="PMCMC iterations after first 5000 burn-in and thinning by 5",ylab="sigma")
abline(h=0.25, col="red")
abline(h=mean(sigma[,2]),col="blue")
plot(gamma,type='l',main=TeX("Sampled COVID-19 England Recovery rate ($\\gamma$)"),xlab="PMCMC iterations after first 5000 burn-in and thinning by 5",ylab="gamma",ylim=c(0.18,max(gamma[,2])))
abline(h=0.2, col="red")
abline(h=mean(gamma[,2]),col="blue")
plot(beta,type='l',main=TeX("Sampled COVID-19 England Contact rate ($\\beta$)"),xlab="PMCMC iterations after first 5000 burn-in and thinning by 5",ylab="beta",ylim=c(0.4,0.7))
abline(h=0.5, col="red")
abline(h=mean(beta[,2]),col="blue")
v <- read.csv("simulate366.csv", header=FALSE, stringsAsFactors=FALSE) %>%
rowSums()
y <- data.frame(value = v) %>%
mutate(time = seq(7, by = 7, length.out = n())) %>%
dplyr::select(time, value)
View(y)
View(y)
write.csv(y, file=gzfile("ytrial.csv.gz"))
write.csv(y, file=gzfile("ytrial.csv.gz"))
library(readr)
read_csv("ytrial.csv.gz") -> d
# write uncompressed data
d %>% write_csv("ytrial.csv")
d
d[3,2]
y[3,2]
d[3,3]
rm(list=ls())
rm(list=ls())
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(pander)
library(lubridate)
library(latex2exp)
library(rbi)
library(rbi.helpers)
# Load the data
v <- read.csv("simulate366.csv", header=FALSE, stringsAsFactors=FALSE)
y <- data.frame(value = v) %>%
mutate(time = seq(1, by = 1, length.out = n())) %>%
dplyr::select(time, V1)
colnames(y) <- c("time", "value")
ncores <- 8
minParticles <- max(ncores, 16)
model_str <- "
model dureau {
obs y
state S
state E
state I
state R
state M
input N
param sigma
param beta
param gamma
param tau
param mu
sub parameter {
sigma ~ truncated_gaussian(0.25, 0.2, lower = 0)
gamma ~ truncated_gaussian(0.2, 0.2, lower = 0) // gamma is the period, not the rate
beta ~ truncated_gaussian(0.5, 0.3, lower = 0)
mu ~ truncated_gaussian(0.001, 0.25, lower = 0)
tau ~ uniform(0, 1)
}
sub initial {
S <-999999
E <- 1
I <-0
R <-0
M <-0
}
sub transition(delta = 1) {
ode(alg = 'RK4(3)', h = 1.0, atoler = 1.0e-3, rtoler = 1.0e-8) {
dS/dt = -(beta*S*I)/N
dE/dt = (beta*S*I)/N - sigma*E
dI/dt = sigma*E - gamma*I - mu*I
dR/dt = gamma*I
dM/dt = mu*I
}
}
sub observation {
y ~ log_normal(log(max((sigma*E)/5, 0)), tau)
}
sub proposal_parameter {
sigma ~ gaussian(sigma, 0.01)
gamma ~ gaussian(gamma, 0.01)
beta ~ gaussian(beta, 0.01)
mu ~ gaussian(mu,0.001)
tau ~ gaussian(tau, 0.05)
}
}"
model <- bi_model(lines = stringi::stri_split_lines(model_str)[[1]])
bi_model <- libbi(model)
input_lst <- list(N = 1000000)
end_time <- max(y$time)
obs_lst <- list(y = y %>% dplyr::filter(time <= end_time))
bi <- sample(bi_model, end_time = end_time, input = input_lst, obs = obs_lst, nsamples = 1000, nparticles = minParticles, nthreads = ncores, proposal = 'prior') %>%
adapt_particles(min = minParticles, max = minParticles*200) %>%
adapt_proposal(min = 0.05, max = 0.4) %>%
sample(nsamples = 10000, thin = 5) %>% # burn in
sample(nsamples = 10000, thin = 5)
bi_lst <- bi_read(bi %>% sample_obs)
write.csv(bi_lst,"SEIR.csv")
fitY <- bi_lst$y %>%
group_by(time) %>%
mutate(
q025 = quantile(value, 0.025),
q25 = quantile(value, 0.25),
q50 = quantile(value, 0.5),
q75 = quantile(value, 0.75),
q975 = quantile(value, 0.975)
) %>% ungroup() %>%
left_join(y %>% rename(Y = value))
write.csv(fitY,"SEIRy.csv")
write.csv(bi_lst$sigma$value,"SEIRsigma.csv")
write.csv(bi_lst$gamma$value,"SEIRgamma.csv")
write.csv(bi_lst$beta$value,"SEIRbeta.csv")
write.csv(bi_lst$mu$value,"SEIRmu.csv")
fitY <- read.csv("SEIRy.csv", header=TRUE, stringsAsFactors=FALSE)
g1 <- ggplot(data = fitY) +
geom_ribbon(aes(x = time, ymin = q25, ymax = q75), alpha = 0.3) +
geom_ribbon(aes(x = time, ymin = q025, ymax = q975), alpha = 0.3) +
geom_line(aes(x = time, y = q50)) +
lines(Z[,1]/5,type='l',col='red')+
geom_point(aes(x = time, y = Y), colour = "Red") +
ylab("Daily new confirmed cases") +
xlab("Time-Day")
fitY <- read.csv("SEIRy.csv", header=TRUE, stringsAsFactors=FALSE)
g1 <- ggplot(data = fitY) +
geom_ribbon(aes(x = time, ymin = q25, ymax = q75), alpha = 0.3) +
geom_ribbon(aes(x = time, ymin = q025, ymax = q975), alpha = 0.3) +
geom_line(aes(x = time, y = q50)) +
geom_point(aes(x = time, y = Y), colour = "Red") +
ylab("Daily new confirmed cases") +
xlab("Time-Day")
#plot(g1)
#lines(Z[,1]/5,type='l',col='red')
plot_df <- read.csv("60wbeta3.csv", header=TRUE, stringsAsFactors=FALSE)
g2 <- ggplot(data = plot_df) +
geom_ribbon(aes(x = time, ymin = q25, ymax = q75), alpha = 0.3) +
geom_ribbon(aes(x = time, ymin = q025, ymax = q975), alpha = 0.3) +
geom_line(aes(x = time, y = q50)) +
ylab(TeX("Transmissibility ($\\beta(t)$)")) +
xlab("Time-Day")
plot_df1 <- read.csv("60wbeta13.csv", header=TRUE, stringsAsFactors=FALSE)
g3 <- ggplot(data = plot_df1) +
geom_ribbon(aes(x = time, ymin = q25, ymax = q75), alpha = 0.3) +
geom_ribbon(aes(x = time, ymin = q025, ymax = q975), alpha = 0.3) +
geom_line(aes(x = time, y = q50)) +
ylab(TeX("Relative trans. ($\\beta(t)-\\beta(0)$)")) +
xlab("Time-Day")
ggarrange(g1, g2, g3, ncol = 1, nrow = 3, align = "v")
g1
g1
